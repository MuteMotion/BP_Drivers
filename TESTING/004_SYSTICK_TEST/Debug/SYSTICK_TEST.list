
SYSTICK_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000eb0  08000eb8  00010eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000eb0  08000eb0  00010eb8  2**0
                  CONTENTS
  4 .ARM          00000000  08000eb0  08000eb0  00010eb8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000eb0  08000eb8  00010eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000eb0  08000eb0  00010eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000eb4  08000eb4  00010eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000eb8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000eb8  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010eb8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001183  00000000  00000000  00010ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000588  00000000  00000000  00012064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  000125f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000210  00000000  00000000  00012858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000727  00000000  00000000  00012a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f5f  00000000  00000000  0001318f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004b1d  00000000  00000000  000140ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00018c0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000978  00000000  00000000  00018c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e98 	.word	0x08000e98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e98 	.word	0x08000e98

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_drsub>:
 80003c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	e002      	b.n	80003d0 <__adddf3>
 80003ca:	bf00      	nop

080003cc <__aeabi_dsub>:
 80003cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d0 <__adddf3>:
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	bf1f      	itttt	ne
 80003e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f6:	f000 80e2 	beq.w	80005be <__adddf3+0x1ee>
 80003fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000402:	bfb8      	it	lt
 8000404:	426d      	neglt	r5, r5
 8000406:	dd0c      	ble.n	8000422 <__adddf3+0x52>
 8000408:	442c      	add	r4, r5
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	ea82 0000 	eor.w	r0, r2, r0
 8000416:	ea83 0101 	eor.w	r1, r3, r1
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	2d36      	cmp	r5, #54	; 0x36
 8000424:	bf88      	it	hi
 8000426:	bd30      	pophi	{r4, r5, pc}
 8000428:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800042c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000430:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x70>
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800044c:	d002      	beq.n	8000454 <__adddf3+0x84>
 800044e:	4252      	negs	r2, r2
 8000450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000454:	ea94 0f05 	teq	r4, r5
 8000458:	f000 80a7 	beq.w	80005aa <__adddf3+0x1da>
 800045c:	f1a4 0401 	sub.w	r4, r4, #1
 8000460:	f1d5 0e20 	rsbs	lr, r5, #32
 8000464:	db0d      	blt.n	8000482 <__adddf3+0xb2>
 8000466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046a:	fa22 f205 	lsr.w	r2, r2, r5
 800046e:	1880      	adds	r0, r0, r2
 8000470:	f141 0100 	adc.w	r1, r1, #0
 8000474:	fa03 f20e 	lsl.w	r2, r3, lr
 8000478:	1880      	adds	r0, r0, r2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	4159      	adcs	r1, r3
 8000480:	e00e      	b.n	80004a0 <__adddf3+0xd0>
 8000482:	f1a5 0520 	sub.w	r5, r5, #32
 8000486:	f10e 0e20 	add.w	lr, lr, #32
 800048a:	2a01      	cmp	r2, #1
 800048c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000490:	bf28      	it	cs
 8000492:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	18c0      	adds	r0, r0, r3
 800049c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a4:	d507      	bpl.n	80004b6 <__adddf3+0xe6>
 80004a6:	f04f 0e00 	mov.w	lr, #0
 80004aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ba:	d31b      	bcc.n	80004f4 <__adddf3+0x124>
 80004bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c0:	d30c      	bcc.n	80004dc <__adddf3+0x10c>
 80004c2:	0849      	lsrs	r1, r1, #1
 80004c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004cc:	f104 0401 	add.w	r4, r4, #1
 80004d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d8:	f080 809a 	bcs.w	8000610 <__adddf3+0x240>
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e0:	bf08      	it	eq
 80004e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e6:	f150 0000 	adcs.w	r0, r0, #0
 80004ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ee:	ea41 0105 	orr.w	r1, r1, r5
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f8:	4140      	adcs	r0, r0
 80004fa:	eb41 0101 	adc.w	r1, r1, r1
 80004fe:	3c01      	subs	r4, #1
 8000500:	bf28      	it	cs
 8000502:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000506:	d2e9      	bcs.n	80004dc <__adddf3+0x10c>
 8000508:	f091 0f00 	teq	r1, #0
 800050c:	bf04      	itt	eq
 800050e:	4601      	moveq	r1, r0
 8000510:	2000      	moveq	r0, #0
 8000512:	fab1 f381 	clz	r3, r1
 8000516:	bf08      	it	eq
 8000518:	3320      	addeq	r3, #32
 800051a:	f1a3 030b 	sub.w	r3, r3, #11
 800051e:	f1b3 0220 	subs.w	r2, r3, #32
 8000522:	da0c      	bge.n	800053e <__adddf3+0x16e>
 8000524:	320c      	adds	r2, #12
 8000526:	dd08      	ble.n	800053a <__adddf3+0x16a>
 8000528:	f102 0c14 	add.w	ip, r2, #20
 800052c:	f1c2 020c 	rsb	r2, r2, #12
 8000530:	fa01 f00c 	lsl.w	r0, r1, ip
 8000534:	fa21 f102 	lsr.w	r1, r1, r2
 8000538:	e00c      	b.n	8000554 <__adddf3+0x184>
 800053a:	f102 0214 	add.w	r2, r2, #20
 800053e:	bfd8      	it	le
 8000540:	f1c2 0c20 	rsble	ip, r2, #32
 8000544:	fa01 f102 	lsl.w	r1, r1, r2
 8000548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800054c:	bfdc      	itt	le
 800054e:	ea41 010c 	orrle.w	r1, r1, ip
 8000552:	4090      	lslle	r0, r2
 8000554:	1ae4      	subs	r4, r4, r3
 8000556:	bfa2      	ittt	ge
 8000558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800055c:	4329      	orrge	r1, r5
 800055e:	bd30      	popge	{r4, r5, pc}
 8000560:	ea6f 0404 	mvn.w	r4, r4
 8000564:	3c1f      	subs	r4, #31
 8000566:	da1c      	bge.n	80005a2 <__adddf3+0x1d2>
 8000568:	340c      	adds	r4, #12
 800056a:	dc0e      	bgt.n	800058a <__adddf3+0x1ba>
 800056c:	f104 0414 	add.w	r4, r4, #20
 8000570:	f1c4 0220 	rsb	r2, r4, #32
 8000574:	fa20 f004 	lsr.w	r0, r0, r4
 8000578:	fa01 f302 	lsl.w	r3, r1, r2
 800057c:	ea40 0003 	orr.w	r0, r0, r3
 8000580:	fa21 f304 	lsr.w	r3, r1, r4
 8000584:	ea45 0103 	orr.w	r1, r5, r3
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f1c4 040c 	rsb	r4, r4, #12
 800058e:	f1c4 0220 	rsb	r2, r4, #32
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 f304 	lsl.w	r3, r1, r4
 800059a:	ea40 0003 	orr.w	r0, r0, r3
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	fa21 f004 	lsr.w	r0, r1, r4
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f094 0f00 	teq	r4, #0
 80005ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b2:	bf06      	itte	eq
 80005b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b8:	3401      	addeq	r4, #1
 80005ba:	3d01      	subne	r5, #1
 80005bc:	e74e      	b.n	800045c <__adddf3+0x8c>
 80005be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c2:	bf18      	it	ne
 80005c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c8:	d029      	beq.n	800061e <__adddf3+0x24e>
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	d005      	beq.n	80005e2 <__adddf3+0x212>
 80005d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005da:	bf04      	itt	eq
 80005dc:	4619      	moveq	r1, r3
 80005de:	4610      	moveq	r0, r2
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf1e      	ittt	ne
 80005e8:	2100      	movne	r1, #0
 80005ea:	2000      	movne	r0, #0
 80005ec:	bd30      	popne	{r4, r5, pc}
 80005ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f2:	d105      	bne.n	8000600 <__adddf3+0x230>
 80005f4:	0040      	lsls	r0, r0, #1
 80005f6:	4149      	adcs	r1, r1
 80005f8:	bf28      	it	cs
 80005fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000604:	bf3c      	itt	cc
 8000606:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060a:	bd30      	popcc	{r4, r5, pc}
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000610:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000614:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf1a      	itte	ne
 8000624:	4619      	movne	r1, r3
 8000626:	4610      	movne	r0, r2
 8000628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800062c:	bf1c      	itt	ne
 800062e:	460b      	movne	r3, r1
 8000630:	4602      	movne	r2, r0
 8000632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000636:	bf06      	itte	eq
 8000638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800063c:	ea91 0f03 	teqeq	r1, r3
 8000640:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop

08000648 <__aeabi_ui2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f04f 0500 	mov.w	r5, #0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e750      	b.n	8000508 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_i2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e73e      	b.n	8000508 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_f2d>:
 800068c:	0042      	lsls	r2, r0, #1
 800068e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069a:	bf1f      	itttt	ne
 800069c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a8:	4770      	bxne	lr
 80006aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ae:	bf08      	it	eq
 80006b0:	4770      	bxeq	lr
 80006b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b6:	bf04      	itt	eq
 80006b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006bc:	4770      	bxeq	lr
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	e71c      	b.n	8000508 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_ul2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f04f 0500 	mov.w	r5, #0
 80006de:	e00a      	b.n	80006f6 <__aeabi_l2d+0x16>

080006e0 <__aeabi_l2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_l2d+0x16>
 80006f0:	4240      	negs	r0, r0
 80006f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000702:	f43f aed8 	beq.w	80004b6 <__adddf3+0xe6>
 8000706:	f04f 0203 	mov.w	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071e:	f1c2 0320 	rsb	r3, r2, #32
 8000722:	fa00 fc03 	lsl.w	ip, r0, r3
 8000726:	fa20 f002 	lsr.w	r0, r0, r2
 800072a:	fa01 fe03 	lsl.w	lr, r1, r3
 800072e:	ea40 000e 	orr.w	r0, r0, lr
 8000732:	fa21 f102 	lsr.w	r1, r1, r2
 8000736:	4414      	add	r4, r2
 8000738:	e6bd      	b.n	80004b6 <__adddf3+0xe6>
 800073a:	bf00      	nop

0800073c <__aeabi_d2uiz>:
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	d211      	bcs.n	8000764 <__aeabi_d2uiz+0x28>
 8000740:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000744:	d211      	bcs.n	800076a <__aeabi_d2uiz+0x2e>
 8000746:	d50d      	bpl.n	8000764 <__aeabi_d2uiz+0x28>
 8000748:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800074c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000750:	d40e      	bmi.n	8000770 <__aeabi_d2uiz+0x34>
 8000752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075e:	fa23 f002 	lsr.w	r0, r3, r2
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800076e:	d102      	bne.n	8000776 <__aeabi_d2uiz+0x3a>
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr

0800077c <EXTI0_IRQHandler>:
    return Local_FunctionStatus;
}
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI0_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE0]();
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <EXTI0_IRQHandler+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4798      	blx	r3
    }
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000001c 	.word	0x2000001c

08000790 <EXTI1_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI1_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE1]();
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <EXTI1_IRQHandler+0x10>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	4798      	blx	r3
    }
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000001c 	.word	0x2000001c

080007a4 <EXTI2_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI2_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE2]();
 80007a8:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <EXTI2_IRQHandler+0x10>)
 80007aa:	689b      	ldr	r3, [r3, #8]
 80007ac:	4798      	blx	r3
    }
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	2000001c 	.word	0x2000001c

080007b8 <EXTI3_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI3_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE3]();
 80007bc:	4b02      	ldr	r3, [pc, #8]	; (80007c8 <EXTI3_IRQHandler+0x10>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	4798      	blx	r3
    }
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000001c 	.word	0x2000001c

080007cc <EXTI4_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI4_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE4]();
 80007d0:	4b02      	ldr	r3, [pc, #8]	; (80007dc <EXTI4_IRQHandler+0x10>)
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	4798      	blx	r3
    }
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000001c 	.word	0x2000001c

080007e0 <MCAL_GPIO_SetPinMode>:
#include "GPIO_private.h"
#include "GPIO_config.h"
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinMode(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinMode)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	460b      	mov	r3, r1
 80007ec:	71bb      	strb	r3, [r7, #6]
 80007ee:	4613      	mov	r3, r2
 80007f0:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	f000 8082 	beq.w	8000902 <MCAL_GPIO_SetPinMode+0x122>
 80007fe:	2b02      	cmp	r3, #2
 8000800:	f300 80bc 	bgt.w	800097c <MCAL_GPIO_SetPinMode+0x19c>
 8000804:	2b00      	cmp	r3, #0
 8000806:	d002      	beq.n	800080e <MCAL_GPIO_SetPinMode+0x2e>
 8000808:	2b01      	cmp	r3, #1
 800080a:	d03d      	beq.n	8000888 <MCAL_GPIO_SetPinMode+0xa8>
 800080c:	e0b6      	b.n	800097c <MCAL_GPIO_SetPinMode+0x19c>
    {
    case GPIO_PORTA:
        if( Copy_PinID < 8 )
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	2b07      	cmp	r3, #7
 8000812:	d819      	bhi.n	8000848 <MCAL_GPIO_SetPinMode+0x68>
        {
            MCAL_GPIOA->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000814:	4b5e      	ldr	r3, [pc, #376]	; (8000990 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	79ba      	ldrb	r2, [r7, #6]
 800081a:	0092      	lsls	r2, r2, #2
 800081c:	210f      	movs	r1, #15
 800081e:	fa01 f202 	lsl.w	r2, r1, r2
 8000822:	43d2      	mvns	r2, r2
 8000824:	4611      	mov	r1, r2
 8000826:	4a5a      	ldr	r2, [pc, #360]	; (8000990 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000828:	400b      	ands	r3, r1
 800082a:	6013      	str	r3, [r2, #0]
            MCAL_GPIOA->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 800082c:	4b58      	ldr	r3, [pc, #352]	; (8000990 <MCAL_GPIO_SetPinMode+0x1b0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	7979      	ldrb	r1, [r7, #5]
 8000832:	79ba      	ldrb	r2, [r7, #6]
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	fa01 f202 	lsl.w	r2, r1, r2
 800083a:	4611      	mov	r1, r2
 800083c:	4a54      	ldr	r2, [pc, #336]	; (8000990 <MCAL_GPIO_SetPinMode+0x1b0>)
 800083e:	430b      	orrs	r3, r1
 8000840:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000842:	2301      	movs	r3, #1
 8000844:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 8000846:	e09c      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d819      	bhi.n	8000882 <MCAL_GPIO_SetPinMode+0xa2>
            MCAL_GPIOA->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 800084e:	4b50      	ldr	r3, [pc, #320]	; (8000990 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	79ba      	ldrb	r2, [r7, #6]
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	210f      	movs	r1, #15
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	43d2      	mvns	r2, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a4b      	ldr	r2, [pc, #300]	; (8000990 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000862:	400b      	ands	r3, r1
 8000864:	6053      	str	r3, [r2, #4]
            MCAL_GPIOA->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000866:	4b4a      	ldr	r3, [pc, #296]	; (8000990 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	7979      	ldrb	r1, [r7, #5]
 800086c:	79ba      	ldrb	r2, [r7, #6]
 800086e:	0092      	lsls	r2, r2, #2
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	4611      	mov	r1, r2
 8000876:	4a46      	ldr	r2, [pc, #280]	; (8000990 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000878:	430b      	orrs	r3, r1
 800087a:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
    break;
 8000880:	e07f      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
    break;
 8000886:	e07c      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
    case GPIO_PORTB:
        if( Copy_PinID < 8 )
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d819      	bhi.n	80008c2 <MCAL_GPIO_SetPinMode+0xe2>
        {
            MCAL_GPIOB->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 800088e:	4b41      	ldr	r3, [pc, #260]	; (8000994 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	79ba      	ldrb	r2, [r7, #6]
 8000894:	0092      	lsls	r2, r2, #2
 8000896:	210f      	movs	r1, #15
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	43d2      	mvns	r2, r2
 800089e:	4611      	mov	r1, r2
 80008a0:	4a3c      	ldr	r2, [pc, #240]	; (8000994 <MCAL_GPIO_SetPinMode+0x1b4>)
 80008a2:	400b      	ands	r3, r1
 80008a4:	6013      	str	r3, [r2, #0]
            MCAL_GPIOB->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 80008a6:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <MCAL_GPIO_SetPinMode+0x1b4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	7979      	ldrb	r1, [r7, #5]
 80008ac:	79ba      	ldrb	r2, [r7, #6]
 80008ae:	0092      	lsls	r2, r2, #2
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	4611      	mov	r1, r2
 80008b6:	4a37      	ldr	r2, [pc, #220]	; (8000994 <MCAL_GPIO_SetPinMode+0x1b4>)
 80008b8:	430b      	orrs	r3, r1
 80008ba:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80008bc:	2301      	movs	r3, #1
 80008be:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 80008c0:	e05f      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 80008c2:	79bb      	ldrb	r3, [r7, #6]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d819      	bhi.n	80008fc <MCAL_GPIO_SetPinMode+0x11c>
            MCAL_GPIOB->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 80008c8:	4b32      	ldr	r3, [pc, #200]	; (8000994 <MCAL_GPIO_SetPinMode+0x1b4>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	79ba      	ldrb	r2, [r7, #6]
 80008ce:	0092      	lsls	r2, r2, #2
 80008d0:	210f      	movs	r1, #15
 80008d2:	fa01 f202 	lsl.w	r2, r1, r2
 80008d6:	43d2      	mvns	r2, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a2e      	ldr	r2, [pc, #184]	; (8000994 <MCAL_GPIO_SetPinMode+0x1b4>)
 80008dc:	400b      	ands	r3, r1
 80008de:	6053      	str	r3, [r2, #4]
            MCAL_GPIOB->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 80008e0:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <MCAL_GPIO_SetPinMode+0x1b4>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	7979      	ldrb	r1, [r7, #5]
 80008e6:	79ba      	ldrb	r2, [r7, #6]
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	fa01 f202 	lsl.w	r2, r1, r2
 80008ee:	4611      	mov	r1, r2
 80008f0:	4a28      	ldr	r2, [pc, #160]	; (8000994 <MCAL_GPIO_SetPinMode+0x1b4>)
 80008f2:	430b      	orrs	r3, r1
 80008f4:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
    break;
 80008fa:	e042      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	73fb      	strb	r3, [r7, #15]
    break;
 8000900:	e03f      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
    case GPIO_PORTC:
        if( Copy_PinID < 8 )
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	2b07      	cmp	r3, #7
 8000906:	d819      	bhi.n	800093c <MCAL_GPIO_SetPinMode+0x15c>
        {
            MCAL_GPIOC->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MCAL_GPIO_SetPinMode+0x1b8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	79ba      	ldrb	r2, [r7, #6]
 800090e:	0092      	lsls	r2, r2, #2
 8000910:	210f      	movs	r1, #15
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	43d2      	mvns	r2, r2
 8000918:	4611      	mov	r1, r2
 800091a:	4a1f      	ldr	r2, [pc, #124]	; (8000998 <MCAL_GPIO_SetPinMode+0x1b8>)
 800091c:	400b      	ands	r3, r1
 800091e:	6013      	str	r3, [r2, #0]
            MCAL_GPIOC->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	7979      	ldrb	r1, [r7, #5]
 8000926:	79ba      	ldrb	r2, [r7, #6]
 8000928:	0092      	lsls	r2, r2, #2
 800092a:	fa01 f202 	lsl.w	r2, r1, r2
 800092e:	4611      	mov	r1, r2
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000932:	430b      	orrs	r3, r1
 8000934:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000936:	2301      	movs	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 800093a:	e022      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	2b0f      	cmp	r3, #15
 8000940:	d819      	bhi.n	8000976 <MCAL_GPIO_SetPinMode+0x196>
            MCAL_GPIOC->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	79ba      	ldrb	r2, [r7, #6]
 8000948:	0092      	lsls	r2, r2, #2
 800094a:	210f      	movs	r1, #15
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	43d2      	mvns	r2, r2
 8000952:	4611      	mov	r1, r2
 8000954:	4a10      	ldr	r2, [pc, #64]	; (8000998 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000956:	400b      	ands	r3, r1
 8000958:	6053      	str	r3, [r2, #4]
            MCAL_GPIOC->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MCAL_GPIO_SetPinMode+0x1b8>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	7979      	ldrb	r1, [r7, #5]
 8000960:	79ba      	ldrb	r2, [r7, #6]
 8000962:	0092      	lsls	r2, r2, #2
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	4611      	mov	r1, r2
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <MCAL_GPIO_SetPinMode+0x1b8>)
 800096c:	430b      	orrs	r3, r1
 800096e:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000970:	2301      	movs	r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
    break;
 8000974:	e005      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 8000976:	2300      	movs	r3, #0
 8000978:	73fb      	strb	r3, [r7, #15]
    break;
 800097a:	e002      	b.n	8000982 <MCAL_GPIO_SetPinMode+0x1a2>
    default:
            Local_FunctionStatus = E_NOT_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
    break;
 8000980:	bf00      	nop
    }
    return Local_FunctionStatus;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
}
 8000984:	4618      	mov	r0, r3
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40010800 	.word	0x40010800
 8000994:	40010c00 	.word	0x40010c00
 8000998:	40011000 	.word	0x40011000

0800099c <MCAL_GPIO_SetPinValue>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinValue(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinValue)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
 80009a6:	460b      	mov	r3, r1
 80009a8:	71bb      	strb	r3, [r7, #6]
 80009aa:	4613      	mov	r3, r2
 80009ac:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d04e      	beq.n	8000a56 <MCAL_GPIO_SetPinValue+0xba>
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	dc70      	bgt.n	8000a9e <MCAL_GPIO_SetPinValue+0x102>
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <MCAL_GPIO_SetPinValue+0x2a>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d024      	beq.n	8000a0e <MCAL_GPIO_SetPinValue+0x72>
 80009c4:	e06b      	b.n	8000a9e <MCAL_GPIO_SetPinValue+0x102>
    {
    case GPIO_PORTA:
        switch (Copy_PinValue)
 80009c6:	797b      	ldrb	r3, [r7, #5]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d00e      	beq.n	80009ea <MCAL_GPIO_SetPinValue+0x4e>
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d11a      	bne.n	8000a06 <MCAL_GPIO_SetPinValue+0x6a>
        {
        case GPIO_HIGH:
            SET_BIT( (MCAL_GPIOA->ODR) , Copy_PinID);
 80009d0:	4b37      	ldr	r3, [pc, #220]	; (8000ab0 <MCAL_GPIO_SetPinValue+0x114>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	79ba      	ldrb	r2, [r7, #6]
 80009d6:	2101      	movs	r1, #1
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	4611      	mov	r1, r2
 80009de:	4a34      	ldr	r2, [pc, #208]	; (8000ab0 <MCAL_GPIO_SetPinValue+0x114>)
 80009e0:	430b      	orrs	r3, r1
 80009e2:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 80009e4:	2301      	movs	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
            break;
 80009e8:	e010      	b.n	8000a0c <MCAL_GPIO_SetPinValue+0x70>
        case GPIO_LOW:
            CLR_BIT( (MCAL_GPIOA->ODR) , Copy_PinID);
 80009ea:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <MCAL_GPIO_SetPinValue+0x114>)
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	79ba      	ldrb	r2, [r7, #6]
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	43d2      	mvns	r2, r2
 80009f8:	4611      	mov	r1, r2
 80009fa:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <MCAL_GPIO_SetPinValue+0x114>)
 80009fc:	400b      	ands	r3, r1
 80009fe:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
            break;
 8000a04:	e002      	b.n	8000a0c <MCAL_GPIO_SetPinValue+0x70>
        default:
            Local_FunctionStatus = E_NOT_OK;
 8000a06:	2300      	movs	r3, #0
 8000a08:	73fb      	strb	r3, [r7, #15]
            break;
 8000a0a:	bf00      	nop
        }
    break;
 8000a0c:	e04a      	b.n	8000aa4 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTB:
        switch (Copy_PinValue)
 8000a0e:	797b      	ldrb	r3, [r7, #5]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00e      	beq.n	8000a32 <MCAL_GPIO_SetPinValue+0x96>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d11a      	bne.n	8000a4e <MCAL_GPIO_SetPinValue+0xb2>
        {
        case GPIO_HIGH:
            SET_BIT(MCAL_GPIOB->ODR , Copy_PinID);
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <MCAL_GPIO_SetPinValue+0x118>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	79ba      	ldrb	r2, [r7, #6]
 8000a1e:	2101      	movs	r1, #1
 8000a20:	fa01 f202 	lsl.w	r2, r1, r2
 8000a24:	4611      	mov	r1, r2
 8000a26:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <MCAL_GPIO_SetPinValue+0x118>)
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	73fb      	strb	r3, [r7, #15]
            break;
 8000a30:	e010      	b.n	8000a54 <MCAL_GPIO_SetPinValue+0xb8>
        case GPIO_LOW:
            CLR_BIT(MCAL_GPIOB->ODR , Copy_PinID);
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MCAL_GPIO_SetPinValue+0x118>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	79ba      	ldrb	r2, [r7, #6]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3e:	43d2      	mvns	r2, r2
 8000a40:	4611      	mov	r1, r2
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MCAL_GPIO_SetPinValue+0x118>)
 8000a44:	400b      	ands	r3, r1
 8000a46:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
            break;
 8000a4c:	e002      	b.n	8000a54 <MCAL_GPIO_SetPinValue+0xb8>
        default:
            Local_FunctionStatus = E_NOT_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
            break;
 8000a52:	bf00      	nop
        }
    break;
 8000a54:	e026      	b.n	8000aa4 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTC:
        switch (Copy_PinValue)
 8000a56:	797b      	ldrb	r3, [r7, #5]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00e      	beq.n	8000a7a <MCAL_GPIO_SetPinValue+0xde>
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d11a      	bne.n	8000a96 <MCAL_GPIO_SetPinValue+0xfa>
        {
        case GPIO_HIGH:
            SET_BIT(MCAL_GPIOC->ODR , Copy_PinID);
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MCAL_GPIO_SetPinValue+0x11c>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	2101      	movs	r1, #1
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MCAL_GPIO_SetPinValue+0x11c>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
            break;
 8000a78:	e010      	b.n	8000a9c <MCAL_GPIO_SetPinValue+0x100>
        case GPIO_LOW:
            CLR_BIT(MCAL_GPIOC->ODR , Copy_PinID);
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MCAL_GPIO_SetPinValue+0x11c>)
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	79ba      	ldrb	r2, [r7, #6]
 8000a80:	2101      	movs	r1, #1
 8000a82:	fa01 f202 	lsl.w	r2, r1, r2
 8000a86:	43d2      	mvns	r2, r2
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <MCAL_GPIO_SetPinValue+0x11c>)
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000a90:	2301      	movs	r3, #1
 8000a92:	73fb      	strb	r3, [r7, #15]
            break;
 8000a94:	e002      	b.n	8000a9c <MCAL_GPIO_SetPinValue+0x100>
        default:
            Local_FunctionStatus = E_NOT_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
            break;
 8000a9a:	bf00      	nop
        }
    break;
 8000a9c:	e002      	b.n	8000aa4 <MCAL_GPIO_SetPinValue+0x108>
    default:
        Local_FunctionStatus = E_NOT_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8000aa2:	bf00      	nop
    }
    return Local_FunctionStatus;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	40010800 	.word	0x40010800
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	40011000 	.word	0x40011000

08000abc <MCAL_RCC_InitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"
#include "RCC_interface.h"
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71fb      	strb	r3, [r7, #7]
    #if RCC_SYSCLK == RCC_HSI
        /* Enable HSI */
        SET_BIT( RCC_CR , RCC_CR_HSION);
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MCAL_RCC_InitSysClock+0x4c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <MCAL_RCC_InitSysClock+0x4c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6013      	str	r3, [r2, #0]
        /* Wait until the clock is stable */
        while( !GET_BIT( RCC_CR , RCC_CR_HSIRDY ) );
 8000ad2:	bf00      	nop
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MCAL_RCC_InitSysClock+0x4c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f9      	beq.n	8000ad4 <MCAL_RCC_InitSysClock+0x18>
        /* Select the HSI As system CLOCK */
        CLR_BIT( RCC_CFGR , 0 );
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MCAL_RCC_InitSysClock+0x50>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <MCAL_RCC_InitSysClock+0x50>)
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	6013      	str	r3, [r2, #0]
        CLR_BIT( RCC_CFGR , 1 );
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MCAL_RCC_InitSysClock+0x50>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <MCAL_RCC_InitSysClock+0x50>)
 8000af2:	f023 0302 	bic.w	r3, r3, #2
 8000af6:	6013      	str	r3, [r2, #0]
        local_functionStates = E_OK;
 8000af8:	2301      	movs	r3, #1
 8000afa:	71fb      	strb	r3, [r7, #7]
            #error "Wrong Choice !!"
        #endif /* RCC_PLL_SRC */
    #else 
        #error "Wrong Choice !!"
    #endif /* RCC_SYSCLK */
    return local_functionStates;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40021004 	.word	0x40021004

08000b10 <MCAL_Rcc_EnablePrephiral>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_Rcc_EnablePrephiral(u8 Copy_PeripheralId , u8 Copy_BusId)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	460a      	mov	r2, r1
 8000b1a:	71fb      	strb	r3, [r7, #7]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
    switch (Copy_BusId)
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d020      	beq.n	8000b6c <MCAL_Rcc_EnablePrephiral+0x5c>
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	dc2b      	bgt.n	8000b86 <MCAL_Rcc_EnablePrephiral+0x76>
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <MCAL_Rcc_EnablePrephiral+0x28>
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d00d      	beq.n	8000b52 <MCAL_Rcc_EnablePrephiral+0x42>
 8000b36:	e026      	b.n	8000b86 <MCAL_Rcc_EnablePrephiral+0x76>
    {
    case RCC_AHB:
    SET_BIT( RCC_AHBENR , Copy_PeripheralId );
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f202 	lsl.w	r2, r1, r2
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8000b50:	e01c      	b.n	8000b8c <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB1:
    SET_BIT ( RCC_AHBENR , Copy_PeripheralId );
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000b62:	430b      	orrs	r3, r1
 8000b64:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
    break;
 8000b6a:	e00f      	b.n	8000b8c <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB2:
    SET_BIT ( RCC_APB2ENR , Copy_PeripheralId );
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MCAL_Rcc_EnablePrephiral+0x8c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <MCAL_Rcc_EnablePrephiral+0x8c>)
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
    break;
 8000b84:	e002      	b.n	8000b8c <MCAL_Rcc_EnablePrephiral+0x7c>
    default:
    local_functionStates =E_NOT_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
    break;
 8000b8a:	bf00      	nop
    }
    return local_functionStates;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	40021014 	.word	0x40021014
 8000b9c:	40021018 	.word	0x40021018

08000ba0 <MCAL_SYSTICK_vINIT>:
    SYSTICK->LOAD = Copy_Ticks;
    Local_FunctionStatus= E_OK;
    return Local_FunctionStatus;
}
Std_ReturnType MCAL_SYSTICK_vINIT()
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71fb      	strb	r3, [r7, #7]
    /**< Disable SysTick timer */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MCAL_SYSTICK_vINIT+0x40>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <MCAL_SYSTICK_vINIT+0x40>)
 8000bb0:	f023 0301 	bic.w	r3, r3, #1
 8000bb4:	6013      	str	r3, [r2, #0]
    /**< Configure SysTick timer to use the processor clock */
    #if SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_1
        SYSTICK->CTRL |= SYSTICK_CTRL_CLKSRC_MASK; /**< Set bit 2 to use the processor clock */
    #elif SYSTICK_AHB_CLKSRC == SYSTICK_CLKSRC_DIV_8
        SYSTICK->CTRL &= ~SYSTICK_CTRL_CLKSRC_MASK;  /**< Clear bit 2 to use the processor clock/8 */
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MCAL_SYSTICK_vINIT+0x40>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <MCAL_SYSTICK_vINIT+0x40>)
 8000bbc:	f023 0304 	bic.w	r3, r3, #4
 8000bc0:	6013      	str	r3, [r2, #0]
    #else
        #error "Invalid STK_CTRL_CLKSOURCE value. Please choose STK_CTRL_CLKSOURCE_1 or STK_CTRL_CLKSOURCE_8."
    #endif
    /**< Generate interrupt when it reaches zero */
    #if SYSTICK_TICKINT == SYSTICK_TICKINT_ENABLED
        SYSTICK->CTRL |= SYSTICK_CTRL_TICKINT_MASK; /**< Set bit 1 to enable interrupt when the counter reaches zero */
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MCAL_SYSTICK_vINIT+0x40>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <MCAL_SYSTICK_vINIT+0x40>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6013      	str	r3, [r2, #0]
    #elif SYSTICK_TICKINT == SYSTICK_TICKINT_DISABLED
        SYSTICK->CTRL &= ~SYSTICK_CTRL_TICKINT_MASK; /**< Clear bit 1 to disable interrupt when the counter reaches zero */
    #else
        #error "Invalid STK_CTRL_TICKINT value. Please choose STK_CTRL_TICKINT_ENABLE or STK_CTRL_TICKINT_DISABLE."
    #endif
    Local_FunctionStatus= E_OK;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
    return Local_FunctionStatus;
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <MCAL_SYSTICK_Reset>:
    Local_FunctionStatus=E_OK;
    return Local_FunctionStatus;
}

Std_ReturnType MCAL_SYSTICK_Reset()
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	71fb      	strb	r3, [r7, #7]
    /**< Disable SysTick timer */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MCAL_SYSTICK_Reset+0x40>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <MCAL_SYSTICK_Reset+0x40>)
 8000bf4:	f023 0301 	bic.w	r3, r3, #1
 8000bf8:	6013      	str	r3, [r2, #0]
    /**< Set the reload value to 0 */
    SYSTICK->LOAD=0;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MCAL_SYSTICK_Reset+0x40>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	605a      	str	r2, [r3, #4]
    /**< Clear the current value */
    SYSTICK->VAL=0;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MCAL_SYSTICK_Reset+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
    /**< Clear the count flag */
    SYSTICK->CTRL &= ~SYSTICK_CTRL_COUNTFLAG_MASK;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MCAL_SYSTICK_Reset+0x40>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <MCAL_SYSTICK_Reset+0x40>)
 8000c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
    Local_FunctionStatus=E_OK;
 8000c12:	2301      	movs	r3, #1
 8000c14:	71fb      	strb	r3, [r7, #7]
    return Local_FunctionStatus;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <MCAL_SYSTICK_DelayMS>:
    }
    return Local_FunctionStatus;
}

Std_ReturnType MCAL_SYSTICK_DelayMS(f32 Copy_MilliSeconds)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    Std_ReturnType Local_FunctionStatus= E_NOT_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	77fb      	strb	r3, [r7, #31]
    /**< Calculate the number of ticks required for the given microseconds */ 
    u32 Local_TickRequired = (u32)(Copy_MilliSeconds * (STK_AHB_CLK / 1000.0));
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff fd29 	bl	800068c <__aeabi_f2d>
 8000c3a:	f04f 0200 	mov.w	r2, #0
 8000c3e:	4b44      	ldr	r3, [pc, #272]	; (8000d50 <MCAL_SYSTICK_DelayMS+0x128>)
 8000c40:	f7ff fa96 	bl	8000170 <__aeabi_dmul>
 8000c44:	4602      	mov	r2, r0
 8000c46:	460b      	mov	r3, r1
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff fd76 	bl	800073c <__aeabi_d2uiz>
 8000c50:	4603      	mov	r3, r0
 8000c52:	617b      	str	r3, [r7, #20]
    /**< Check if the ticks required is within the valid range */ 
    if (Local_TickRequired <= SYSTICK_RELOAD_MAX)
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5a:	d21a      	bcs.n	8000c92 <MCAL_SYSTICK_DelayMS+0x6a>
    {
        /**< Set the reload value of the SysTick timer */ 
        SYSTICK->LOAD = Local_TickRequired;
 8000c5c:	4a3d      	ldr	r2, [pc, #244]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	6053      	str	r3, [r2, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8000c62:	4b3c      	ldr	r3, [pc, #240]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a3b      	ldr	r2, [pc, #236]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6013      	str	r3, [r2, #0]
        /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
        while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8000c6e:	bf00      	nop
 8000c70:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f9      	beq.n	8000c70 <MCAL_SYSTICK_DelayMS+0x48>
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000c7c:	4b35      	ldr	r3, [pc, #212]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000c82:	f023 0301 	bic.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]
        /**< Reset the timer value */ 
        MCAL_SYSTICK_Reset();
 8000c88:	f7ff ffac 	bl	8000be4 <MCAL_SYSTICK_Reset>
        Local_FunctionStatus= E_OK;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	77fb      	strb	r3, [r7, #31]
 8000c90:	e058      	b.n	8000d44 <MCAL_SYSTICK_DelayMS+0x11c>
    }else if(Local_TickRequired > SYSTICK_RELOAD_MAX)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d352      	bcc.n	8000d40 <MCAL_SYSTICK_DelayMS+0x118>
    {
        /**< Calculate the number of Overflows */ 
        u32 Local_OverFlowCount = Local_TickRequired / SYSTICK_RELOAD_MAX;
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	f240 1301 	movw	r3, #257	; 0x101
 8000ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca4:	1ad2      	subs	r2, r2, r3
 8000ca6:	0852      	lsrs	r2, r2, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	0ddb      	lsrs	r3, r3, #23
 8000cac:	613b      	str	r3, [r7, #16]
        /**< Check the first timer value to get the exact delay */  
        u32 Local_InitialValue = Local_TickRequired % SYSTICK_RELOAD_MAX;
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	f240 1301 	movw	r3, #257	; 0x101
 8000cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb8:	1ad1      	subs	r1, r2, r3
 8000cba:	0849      	lsrs	r1, r1, #1
 8000cbc:	440b      	add	r3, r1
 8000cbe:	0dd9      	lsrs	r1, r3, #23
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	061b      	lsls	r3, r3, #24
 8000cc4:	1a5b      	subs	r3, r3, r1
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	60fb      	str	r3, [r7, #12]
        /**< Set the reload value of the SysTick timer */ 
        SYSTICK->LOAD = Local_InitialValue;
 8000cca:	4a22      	ldr	r2, [pc, #136]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6053      	str	r3, [r2, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8000cd0:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1f      	ldr	r2, [pc, #124]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]
        /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
        while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8000cdc:	bf00      	nop
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f9      	beq.n	8000cde <MCAL_SYSTICK_DelayMS+0xb6>
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000cf0:	f023 0301 	bic.w	r3, r3, #1
 8000cf4:	6013      	str	r3, [r2, #0]
        /**< Set the reload value of the SysTick timer for the rest of the  */ 
        SYSTICK->LOAD = SYSTICK_RELOAD_MAX-1;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000cf8:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <MCAL_SYSTICK_DelayMS+0x130>)
 8000cfa:	605a      	str	r2, [r3, #4]
        /**< Enable the SysTick timer */ 
        SYSTICK->CTRL |= SYSTICK_CTRL_ENABLE_MASK;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]
        /**< Loop untill there's no more OVF */ 
        for(u32 Local_Counter=0 ; Local_Counter<=Local_OverFlowCount ; Local_Counter++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	e009      	b.n	8000d22 <MCAL_SYSTICK_DelayMS+0xfa>
        {
            /**< Wait until the COUNTFLAG bit is set (indicates timer has counted down to zero) */ 
            while(!(SYSTICK->CTRL & SYSTICK_CTRL_COUNTFLAG_MASK));
 8000d0e:	bf00      	nop
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f9      	beq.n	8000d10 <MCAL_SYSTICK_DelayMS+0xe8>
        for(u32 Local_Counter=0 ; Local_Counter<=Local_OverFlowCount ; Local_Counter++)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d9f1      	bls.n	8000d0e <MCAL_SYSTICK_DelayMS+0xe6>
        }
        /**< Disable the SysTick timer */ 
        SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <MCAL_SYSTICK_DelayMS+0x12c>)
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	6013      	str	r3, [r2, #0]
        /**< Reset the SysTick timer */ 
        MCAL_SYSTICK_Reset();
 8000d36:	f7ff ff55 	bl	8000be4 <MCAL_SYSTICK_Reset>
        Local_FunctionStatus= E_OK;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	77fb      	strb	r3, [r7, #31]
 8000d3e:	e001      	b.n	8000d44 <MCAL_SYSTICK_DelayMS+0x11c>
    }
    else
    {
        return Local_FunctionStatus;
 8000d40:	7ffb      	ldrb	r3, [r7, #31]
 8000d42:	e000      	b.n	8000d46 <MCAL_SYSTICK_DelayMS+0x11e>
    }
    return Local_FunctionStatus;
 8000d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40bf4000 	.word	0x40bf4000
 8000d54:	e000e010 	.word	0xe000e010
 8000d58:	00fffffe 	.word	0x00fffffe

08000d5c <SysTick_Handler>:
/**
 * @defgroup IRQ_Handlers IRQ Handlers
 * @{
 */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    if (SYSTICK_Callback != NULL)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <SysTick_Handler+0x50>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d01e      	beq.n	8000da6 <SysTick_Handler+0x4a>
    {
        if (SYSTICK_ModeOfInterval == SYSTICK_SINGLE_INTERVAL)
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <SysTick_Handler+0x54>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d111      	bne.n	8000d94 <SysTick_Handler+0x38>
        {
            /**< Disable interrupt when the counter reaches zero */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_TICKINT_MASK;
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <SysTick_Handler+0x58>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <SysTick_Handler+0x58>)
 8000d76:	f023 0302 	bic.w	r3, r3, #2
 8000d7a:	6013      	str	r3, [r2, #0]
            /**< Disable SysTick timer */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <SysTick_Handler+0x58>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <SysTick_Handler+0x58>)
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]
            /**< Clear the current value */
            SYSTICK->LOAD=0;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <SysTick_Handler+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
            /**< Set the reload value to 0 */
            SYSTICK->VAL=0;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <SysTick_Handler+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
        }
        /**< Callback notification */
        SYSTICK_Callback();
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Handler+0x50>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4798      	blx	r3
        /**< Clear the count/interrupt flag */
        SYSTICK->CTRL &= ~SYSTICK_CTRL_COUNTFLAG_MASK;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SysTick_Handler+0x58>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SysTick_Handler+0x58>)
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]
    }
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000005c 	.word	0x2000005c
 8000db0:	20000060 	.word	0x20000060
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <main>:
#include "RCC_interface.h"
#include "GPIO_interface.h"
#include "SYSTICK_interface.h"

int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	MCAL_RCC_InitSysClock();
 8000dbc:	f7ff fe7e 	bl	8000abc <MCAL_RCC_InitSysClock>
	MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPAEN, RCC_APB2);
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f7ff fea4 	bl	8000b10 <MCAL_Rcc_EnablePrephiral>
	MCAL_GPIO_SetPinMode(GPIO_PORTA, GPIO_PIN2, GPIO_OUTPUT_MID_SPEED_PUSHPULL);
 8000dc8:	2202      	movs	r2, #2
 8000dca:	2102      	movs	r1, #2
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fd07 	bl	80007e0 <MCAL_GPIO_SetPinMode>
	MCAL_SYSTICK_vINIT();
 8000dd2:	f7ff fee5 	bl	8000ba0 <MCAL_SYSTICK_vINIT>
    /* Loop forever */
	for(;;)
	{
		MCAL_GPIO_SetPinValue(GPIO_PORTA, GPIO_PIN2, GPIO_HIGH);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2102      	movs	r1, #2
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fdde 	bl	800099c <MCAL_GPIO_SetPinValue>
		MCAL_SYSTICK_DelayMS(1000);
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <main+0x40>)
 8000de2:	f7ff ff21 	bl	8000c28 <MCAL_SYSTICK_DelayMS>
		MCAL_GPIO_SetPinValue(GPIO_PORTA, GPIO_PIN2, GPIO_LOW);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fdd6 	bl	800099c <MCAL_GPIO_SetPinValue>
		MCAL_SYSTICK_DelayMS(1000);
 8000df0:	4801      	ldr	r0, [pc, #4]	; (8000df8 <main+0x40>)
 8000df2:	f7ff ff19 	bl	8000c28 <MCAL_SYSTICK_DelayMS>
		MCAL_GPIO_SetPinValue(GPIO_PORTA, GPIO_PIN2, GPIO_HIGH);
 8000df6:	e7ee      	b.n	8000dd6 <main+0x1e>
 8000df8:	447a0000 	.word	0x447a0000

08000dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2a:	f000 f811 	bl	8000e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2e:	f7ff ffc3 	bl	8000db8 <main>

08000e32 <LoopForever>:

LoopForever:
  b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e40:	08000eb8 	.word	0x08000eb8
  ldr r2, =_sbss
 8000e44:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e48:	20000064 	.word	0x20000064

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <__libc_init_array>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	2600      	movs	r6, #0
 8000e54:	4d0c      	ldr	r5, [pc, #48]	; (8000e88 <__libc_init_array+0x38>)
 8000e56:	4c0d      	ldr	r4, [pc, #52]	; (8000e8c <__libc_init_array+0x3c>)
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	10a4      	asrs	r4, r4, #2
 8000e5c:	42a6      	cmp	r6, r4
 8000e5e:	d109      	bne.n	8000e74 <__libc_init_array+0x24>
 8000e60:	f000 f81a 	bl	8000e98 <_init>
 8000e64:	2600      	movs	r6, #0
 8000e66:	4d0a      	ldr	r5, [pc, #40]	; (8000e90 <__libc_init_array+0x40>)
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <__libc_init_array+0x44>)
 8000e6a:	1b64      	subs	r4, r4, r5
 8000e6c:	10a4      	asrs	r4, r4, #2
 8000e6e:	42a6      	cmp	r6, r4
 8000e70:	d105      	bne.n	8000e7e <__libc_init_array+0x2e>
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e78:	4798      	blx	r3
 8000e7a:	3601      	adds	r6, #1
 8000e7c:	e7ee      	b.n	8000e5c <__libc_init_array+0xc>
 8000e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e82:	4798      	blx	r3
 8000e84:	3601      	adds	r6, #1
 8000e86:	e7f2      	b.n	8000e6e <__libc_init_array+0x1e>
 8000e88:	08000eb0 	.word	0x08000eb0
 8000e8c:	08000eb0 	.word	0x08000eb0
 8000e90:	08000eb0 	.word	0x08000eb0
 8000e94:	08000eb4 	.word	0x08000eb4

08000e98 <_init>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	bf00      	nop
 8000e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9e:	bc08      	pop	{r3}
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	4770      	bx	lr

08000ea4 <_fini>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr
