
GPT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b90  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000cc0  08000cc0  00010cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cc8  08000cc8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000cc8  08000cc8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cc8  08000cc8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc8  08000cc8  00010cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ccc  08000ccc  00010ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  08000ce0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08000ce0  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ef0  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007ac  00000000  00000000  00021f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  000226d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  00022a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000008ff  00000000  00000000  00022ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001610  00000000  00000000  000235df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000057c8  00000000  00000000  00024bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002a3b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000be0  00000000  00000000  0002a408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ca8 	.word	0x08000ca8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000ca8 	.word	0x08000ca8

08000170 <EXTI0_IRQHandler>:
    return Local_FunctionStatus;
}
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE0]();
 8000174:	4b02      	ldr	r3, [pc, #8]	; (8000180 <EXTI0_IRQHandler+0x10>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4798      	blx	r3
    }
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	2000002c 	.word	0x2000002c

08000184 <EXTI1_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI1_IRQHandler(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE1]();
 8000188:	4b02      	ldr	r3, [pc, #8]	; (8000194 <EXTI1_IRQHandler+0x10>)
 800018a:	685b      	ldr	r3, [r3, #4]
 800018c:	4798      	blx	r3
    }
}
 800018e:	bf00      	nop
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	2000002c 	.word	0x2000002c

08000198 <EXTI2_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI2_IRQHandler(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE2]();
 800019c:	4b02      	ldr	r3, [pc, #8]	; (80001a8 <EXTI2_IRQHandler+0x10>)
 800019e:	689b      	ldr	r3, [r3, #8]
 80001a0:	4798      	blx	r3
    }
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	2000002c 	.word	0x2000002c

080001ac <EXTI3_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI3_IRQHandler(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE3]();
 80001b0:	4b02      	ldr	r3, [pc, #8]	; (80001bc <EXTI3_IRQHandler+0x10>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	4798      	blx	r3
    }
}
 80001b6:	bf00      	nop
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	2000002c 	.word	0x2000002c

080001c0 <EXTI4_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI4_IRQHandler(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE4]();
 80001c4:	4b02      	ldr	r3, [pc, #8]	; (80001d0 <EXTI4_IRQHandler+0x10>)
 80001c6:	691b      	ldr	r3, [r3, #16]
 80001c8:	4798      	blx	r3
    }
}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	2000002c 	.word	0x2000002c

080001d4 <MCAL_GPIO_SetPinMode>:
#include "GPIO_private.h"
#include "GPIO_config.h"
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinMode(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinMode)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	460b      	mov	r3, r1
 80001e0:	71bb      	strb	r3, [r7, #6]
 80001e2:	4613      	mov	r3, r2
 80001e4:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80001e6:	2300      	movs	r3, #0
 80001e8:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	2b02      	cmp	r3, #2
 80001ee:	f000 8082 	beq.w	80002f6 <MCAL_GPIO_SetPinMode+0x122>
 80001f2:	2b02      	cmp	r3, #2
 80001f4:	f300 80bc 	bgt.w	8000370 <MCAL_GPIO_SetPinMode+0x19c>
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d002      	beq.n	8000202 <MCAL_GPIO_SetPinMode+0x2e>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d03d      	beq.n	800027c <MCAL_GPIO_SetPinMode+0xa8>
 8000200:	e0b6      	b.n	8000370 <MCAL_GPIO_SetPinMode+0x19c>
    {
    case GPIO_PORTA:
        if( Copy_PinID < 8 )
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	2b07      	cmp	r3, #7
 8000206:	d819      	bhi.n	800023c <MCAL_GPIO_SetPinMode+0x68>
        {
            MCAL_GPIOA->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000208:	4b5e      	ldr	r3, [pc, #376]	; (8000384 <MCAL_GPIO_SetPinMode+0x1b0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	79ba      	ldrb	r2, [r7, #6]
 800020e:	0092      	lsls	r2, r2, #2
 8000210:	210f      	movs	r1, #15
 8000212:	fa01 f202 	lsl.w	r2, r1, r2
 8000216:	43d2      	mvns	r2, r2
 8000218:	4611      	mov	r1, r2
 800021a:	4a5a      	ldr	r2, [pc, #360]	; (8000384 <MCAL_GPIO_SetPinMode+0x1b0>)
 800021c:	400b      	ands	r3, r1
 800021e:	6013      	str	r3, [r2, #0]
            MCAL_GPIOA->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000220:	4b58      	ldr	r3, [pc, #352]	; (8000384 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	7979      	ldrb	r1, [r7, #5]
 8000226:	79ba      	ldrb	r2, [r7, #6]
 8000228:	0092      	lsls	r2, r2, #2
 800022a:	fa01 f202 	lsl.w	r2, r1, r2
 800022e:	4611      	mov	r1, r2
 8000230:	4a54      	ldr	r2, [pc, #336]	; (8000384 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000232:	430b      	orrs	r3, r1
 8000234:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000236:	2301      	movs	r3, #1
 8000238:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 800023a:	e09c      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 800023c:	79bb      	ldrb	r3, [r7, #6]
 800023e:	2b0f      	cmp	r3, #15
 8000240:	d819      	bhi.n	8000276 <MCAL_GPIO_SetPinMode+0xa2>
            MCAL_GPIOA->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000242:	4b50      	ldr	r3, [pc, #320]	; (8000384 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000244:	685b      	ldr	r3, [r3, #4]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	210f      	movs	r1, #15
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a4b      	ldr	r2, [pc, #300]	; (8000384 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000256:	400b      	ands	r3, r1
 8000258:	6053      	str	r3, [r2, #4]
            MCAL_GPIOA->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 800025a:	4b4a      	ldr	r3, [pc, #296]	; (8000384 <MCAL_GPIO_SetPinMode+0x1b0>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	7979      	ldrb	r1, [r7, #5]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0092      	lsls	r2, r2, #2
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a46      	ldr	r2, [pc, #280]	; (8000384 <MCAL_GPIO_SetPinMode+0x1b0>)
 800026c:	430b      	orrs	r3, r1
 800026e:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000270:	2301      	movs	r3, #1
 8000272:	73fb      	strb	r3, [r7, #15]
    break;
 8000274:	e07f      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 8000276:	2300      	movs	r3, #0
 8000278:	73fb      	strb	r3, [r7, #15]
    break;
 800027a:	e07c      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
    case GPIO_PORTB:
        if( Copy_PinID < 8 )
 800027c:	79bb      	ldrb	r3, [r7, #6]
 800027e:	2b07      	cmp	r3, #7
 8000280:	d819      	bhi.n	80002b6 <MCAL_GPIO_SetPinMode+0xe2>
        {
            MCAL_GPIOB->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000282:	4b41      	ldr	r3, [pc, #260]	; (8000388 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79ba      	ldrb	r2, [r7, #6]
 8000288:	0092      	lsls	r2, r2, #2
 800028a:	210f      	movs	r1, #15
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	43d2      	mvns	r2, r2
 8000292:	4611      	mov	r1, r2
 8000294:	4a3c      	ldr	r2, [pc, #240]	; (8000388 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000296:	400b      	ands	r3, r1
 8000298:	6013      	str	r3, [r2, #0]
            MCAL_GPIOB->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 800029a:	4b3b      	ldr	r3, [pc, #236]	; (8000388 <MCAL_GPIO_SetPinMode+0x1b4>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	7979      	ldrb	r1, [r7, #5]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	0092      	lsls	r2, r2, #2
 80002a4:	fa01 f202 	lsl.w	r2, r1, r2
 80002a8:	4611      	mov	r1, r2
 80002aa:	4a37      	ldr	r2, [pc, #220]	; (8000388 <MCAL_GPIO_SetPinMode+0x1b4>)
 80002ac:	430b      	orrs	r3, r1
 80002ae:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 80002b0:	2301      	movs	r3, #1
 80002b2:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 80002b4:	e05f      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 80002b6:	79bb      	ldrb	r3, [r7, #6]
 80002b8:	2b0f      	cmp	r3, #15
 80002ba:	d819      	bhi.n	80002f0 <MCAL_GPIO_SetPinMode+0x11c>
            MCAL_GPIOB->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 80002bc:	4b32      	ldr	r3, [pc, #200]	; (8000388 <MCAL_GPIO_SetPinMode+0x1b4>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	79ba      	ldrb	r2, [r7, #6]
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	210f      	movs	r1, #15
 80002c6:	fa01 f202 	lsl.w	r2, r1, r2
 80002ca:	43d2      	mvns	r2, r2
 80002cc:	4611      	mov	r1, r2
 80002ce:	4a2e      	ldr	r2, [pc, #184]	; (8000388 <MCAL_GPIO_SetPinMode+0x1b4>)
 80002d0:	400b      	ands	r3, r1
 80002d2:	6053      	str	r3, [r2, #4]
            MCAL_GPIOB->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 80002d4:	4b2c      	ldr	r3, [pc, #176]	; (8000388 <MCAL_GPIO_SetPinMode+0x1b4>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	7979      	ldrb	r1, [r7, #5]
 80002da:	79ba      	ldrb	r2, [r7, #6]
 80002dc:	0092      	lsls	r2, r2, #2
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	4611      	mov	r1, r2
 80002e4:	4a28      	ldr	r2, [pc, #160]	; (8000388 <MCAL_GPIO_SetPinMode+0x1b4>)
 80002e6:	430b      	orrs	r3, r1
 80002e8:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 80002ea:	2301      	movs	r3, #1
 80002ec:	73fb      	strb	r3, [r7, #15]
    break;
 80002ee:	e042      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 80002f0:	2300      	movs	r3, #0
 80002f2:	73fb      	strb	r3, [r7, #15]
    break;
 80002f4:	e03f      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
    case GPIO_PORTC:
        if( Copy_PinID < 8 )
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d819      	bhi.n	8000330 <MCAL_GPIO_SetPinMode+0x15c>
        {
            MCAL_GPIOC->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 80002fc:	4b23      	ldr	r3, [pc, #140]	; (800038c <MCAL_GPIO_SetPinMode+0x1b8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	79ba      	ldrb	r2, [r7, #6]
 8000302:	0092      	lsls	r2, r2, #2
 8000304:	210f      	movs	r1, #15
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	43d2      	mvns	r2, r2
 800030c:	4611      	mov	r1, r2
 800030e:	4a1f      	ldr	r2, [pc, #124]	; (800038c <MCAL_GPIO_SetPinMode+0x1b8>)
 8000310:	400b      	ands	r3, r1
 8000312:	6013      	str	r3, [r2, #0]
            MCAL_GPIOC->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000314:	4b1d      	ldr	r3, [pc, #116]	; (800038c <MCAL_GPIO_SetPinMode+0x1b8>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	7979      	ldrb	r1, [r7, #5]
 800031a:	79ba      	ldrb	r2, [r7, #6]
 800031c:	0092      	lsls	r2, r2, #2
 800031e:	fa01 f202 	lsl.w	r2, r1, r2
 8000322:	4611      	mov	r1, r2
 8000324:	4a19      	ldr	r2, [pc, #100]	; (800038c <MCAL_GPIO_SetPinMode+0x1b8>)
 8000326:	430b      	orrs	r3, r1
 8000328:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 800032a:	2301      	movs	r3, #1
 800032c:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 800032e:	e022      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	2b0f      	cmp	r3, #15
 8000334:	d819      	bhi.n	800036a <MCAL_GPIO_SetPinMode+0x196>
            MCAL_GPIOC->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <MCAL_GPIO_SetPinMode+0x1b8>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	210f      	movs	r1, #15
 8000340:	fa01 f202 	lsl.w	r2, r1, r2
 8000344:	43d2      	mvns	r2, r2
 8000346:	4611      	mov	r1, r2
 8000348:	4a10      	ldr	r2, [pc, #64]	; (800038c <MCAL_GPIO_SetPinMode+0x1b8>)
 800034a:	400b      	ands	r3, r1
 800034c:	6053      	str	r3, [r2, #4]
            MCAL_GPIOC->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 800034e:	4b0f      	ldr	r3, [pc, #60]	; (800038c <MCAL_GPIO_SetPinMode+0x1b8>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	7979      	ldrb	r1, [r7, #5]
 8000354:	79ba      	ldrb	r2, [r7, #6]
 8000356:	0092      	lsls	r2, r2, #2
 8000358:	fa01 f202 	lsl.w	r2, r1, r2
 800035c:	4611      	mov	r1, r2
 800035e:	4a0b      	ldr	r2, [pc, #44]	; (800038c <MCAL_GPIO_SetPinMode+0x1b8>)
 8000360:	430b      	orrs	r3, r1
 8000362:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000364:	2301      	movs	r3, #1
 8000366:	73fb      	strb	r3, [r7, #15]
    break;
 8000368:	e005      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 800036a:	2300      	movs	r3, #0
 800036c:	73fb      	strb	r3, [r7, #15]
    break;
 800036e:	e002      	b.n	8000376 <MCAL_GPIO_SetPinMode+0x1a2>
    default:
            Local_FunctionStatus = E_NOT_OK;
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
    break;
 8000374:	bf00      	nop
    }
    return Local_FunctionStatus;
 8000376:	7bfb      	ldrb	r3, [r7, #15]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	40010800 	.word	0x40010800
 8000388:	40010c00 	.word	0x40010c00
 800038c:	40011000 	.word	0x40011000

08000390 <MCAL_GPIO_SetPinValue>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinValue(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinValue)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
 800039a:	460b      	mov	r3, r1
 800039c:	71bb      	strb	r3, [r7, #6]
 800039e:	4613      	mov	r3, r2
 80003a0:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d04e      	beq.n	800044a <MCAL_GPIO_SetPinValue+0xba>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	dc70      	bgt.n	8000492 <MCAL_GPIO_SetPinValue+0x102>
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <MCAL_GPIO_SetPinValue+0x2a>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d024      	beq.n	8000402 <MCAL_GPIO_SetPinValue+0x72>
 80003b8:	e06b      	b.n	8000492 <MCAL_GPIO_SetPinValue+0x102>
    {
    case GPIO_PORTA:
        switch (Copy_PinValue)
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d00e      	beq.n	80003de <MCAL_GPIO_SetPinValue+0x4e>
 80003c0:	2b01      	cmp	r3, #1
 80003c2:	d11a      	bne.n	80003fa <MCAL_GPIO_SetPinValue+0x6a>
        {
        case GPIO_HIGH:
            SET_BIT( (MCAL_GPIOA->ODR) , Copy_PinID);
 80003c4:	4b37      	ldr	r3, [pc, #220]	; (80004a4 <MCAL_GPIO_SetPinValue+0x114>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	79ba      	ldrb	r2, [r7, #6]
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a34      	ldr	r2, [pc, #208]	; (80004a4 <MCAL_GPIO_SetPinValue+0x114>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 80003d8:	2301      	movs	r3, #1
 80003da:	73fb      	strb	r3, [r7, #15]
            break;
 80003dc:	e010      	b.n	8000400 <MCAL_GPIO_SetPinValue+0x70>
        case GPIO_LOW:
            CLR_BIT( (MCAL_GPIOA->ODR) , Copy_PinID);
 80003de:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <MCAL_GPIO_SetPinValue+0x114>)
 80003e0:	68db      	ldr	r3, [r3, #12]
 80003e2:	79ba      	ldrb	r2, [r7, #6]
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	43d2      	mvns	r2, r2
 80003ec:	4611      	mov	r1, r2
 80003ee:	4a2d      	ldr	r2, [pc, #180]	; (80004a4 <MCAL_GPIO_SetPinValue+0x114>)
 80003f0:	400b      	ands	r3, r1
 80003f2:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 80003f4:	2301      	movs	r3, #1
 80003f6:	73fb      	strb	r3, [r7, #15]
            break;
 80003f8:	e002      	b.n	8000400 <MCAL_GPIO_SetPinValue+0x70>
        default:
            Local_FunctionStatus = E_NOT_OK;
 80003fa:	2300      	movs	r3, #0
 80003fc:	73fb      	strb	r3, [r7, #15]
            break;
 80003fe:	bf00      	nop
        }
    break;
 8000400:	e04a      	b.n	8000498 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTB:
        switch (Copy_PinValue)
 8000402:	797b      	ldrb	r3, [r7, #5]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d00e      	beq.n	8000426 <MCAL_GPIO_SetPinValue+0x96>
 8000408:	2b01      	cmp	r3, #1
 800040a:	d11a      	bne.n	8000442 <MCAL_GPIO_SetPinValue+0xb2>
        {
        case GPIO_HIGH:
            SET_BIT(MCAL_GPIOB->ODR , Copy_PinID);
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <MCAL_GPIO_SetPinValue+0x118>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	79ba      	ldrb	r2, [r7, #6]
 8000412:	2101      	movs	r1, #1
 8000414:	fa01 f202 	lsl.w	r2, r1, r2
 8000418:	4611      	mov	r1, r2
 800041a:	4a23      	ldr	r2, [pc, #140]	; (80004a8 <MCAL_GPIO_SetPinValue+0x118>)
 800041c:	430b      	orrs	r3, r1
 800041e:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000420:	2301      	movs	r3, #1
 8000422:	73fb      	strb	r3, [r7, #15]
            break;
 8000424:	e010      	b.n	8000448 <MCAL_GPIO_SetPinValue+0xb8>
        case GPIO_LOW:
            CLR_BIT(MCAL_GPIOB->ODR , Copy_PinID);
 8000426:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <MCAL_GPIO_SetPinValue+0x118>)
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	79ba      	ldrb	r2, [r7, #6]
 800042c:	2101      	movs	r1, #1
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
 8000432:	43d2      	mvns	r2, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <MCAL_GPIO_SetPinValue+0x118>)
 8000438:	400b      	ands	r3, r1
 800043a:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 800043c:	2301      	movs	r3, #1
 800043e:	73fb      	strb	r3, [r7, #15]
            break;
 8000440:	e002      	b.n	8000448 <MCAL_GPIO_SetPinValue+0xb8>
        default:
            Local_FunctionStatus = E_NOT_OK;
 8000442:	2300      	movs	r3, #0
 8000444:	73fb      	strb	r3, [r7, #15]
            break;
 8000446:	bf00      	nop
        }
    break;
 8000448:	e026      	b.n	8000498 <MCAL_GPIO_SetPinValue+0x108>
    case GPIO_PORTC:
        switch (Copy_PinValue)
 800044a:	797b      	ldrb	r3, [r7, #5]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d00e      	beq.n	800046e <MCAL_GPIO_SetPinValue+0xde>
 8000450:	2b01      	cmp	r3, #1
 8000452:	d11a      	bne.n	800048a <MCAL_GPIO_SetPinValue+0xfa>
        {
        case GPIO_HIGH:
            SET_BIT(MCAL_GPIOC->ODR , Copy_PinID);
 8000454:	4b15      	ldr	r3, [pc, #84]	; (80004ac <MCAL_GPIO_SetPinValue+0x11c>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	79ba      	ldrb	r2, [r7, #6]
 800045a:	2101      	movs	r1, #1
 800045c:	fa01 f202 	lsl.w	r2, r1, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <MCAL_GPIO_SetPinValue+0x11c>)
 8000464:	430b      	orrs	r3, r1
 8000466:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000468:	2301      	movs	r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
            break;
 800046c:	e010      	b.n	8000490 <MCAL_GPIO_SetPinValue+0x100>
        case GPIO_LOW:
            CLR_BIT(MCAL_GPIOC->ODR , Copy_PinID);
 800046e:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MCAL_GPIO_SetPinValue+0x11c>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	79ba      	ldrb	r2, [r7, #6]
 8000474:	2101      	movs	r1, #1
 8000476:	fa01 f202 	lsl.w	r2, r1, r2
 800047a:	43d2      	mvns	r2, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <MCAL_GPIO_SetPinValue+0x11c>)
 8000480:	400b      	ands	r3, r1
 8000482:	60d3      	str	r3, [r2, #12]
            Local_FunctionStatus = E_OK;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
            break;
 8000488:	e002      	b.n	8000490 <MCAL_GPIO_SetPinValue+0x100>
        default:
            Local_FunctionStatus = E_NOT_OK;
 800048a:	2300      	movs	r3, #0
 800048c:	73fb      	strb	r3, [r7, #15]
            break;
 800048e:	bf00      	nop
        }
    break;
 8000490:	e002      	b.n	8000498 <MCAL_GPIO_SetPinValue+0x108>
    default:
        Local_FunctionStatus = E_NOT_OK;
 8000492:	2300      	movs	r3, #0
 8000494:	73fb      	strb	r3, [r7, #15]
        break;
 8000496:	bf00      	nop
    }
    return Local_FunctionStatus;
 8000498:	7bfb      	ldrb	r3, [r7, #15]
}
 800049a:	4618      	mov	r0, r3
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	40011000 	.word	0x40011000

080004b0 <GPT_TIMx_init>:
static void (*TIM2_CallBack)(void);
static void (*TIM3_CallBack)(void);
static void (*TIM4_CallBack)(void);

Std_ReturnType GPT_TIMx_init(u8 Copy_TIMx,GPT_Config_t* Copy_GPT_Config)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	6039      	str	r1, [r7, #0]
 80004ba:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType local_functionStates = E_NOT_OK;
 80004bc:	2300      	movs	r3, #0
 80004be:	73fb      	strb	r3, [r7, #15]
    GPT_TIMx_SetPeriod(Copy_TIMx,Copy_GPT_Config->ARR);
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	881a      	ldrh	r2, [r3, #0]
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 f8bd 	bl	8000648 <GPT_TIMx_SetPeriod>
    #if TIM_Ratio == MilliSeconds
        u16 Local_Prescalar = (u16)(TIM_Clk_Freq / 1000000)-1;
 80004ce:	2323      	movs	r3, #35	; 0x23
 80004d0:	81bb      	strh	r3, [r7, #12]
        GPT_TIMx_SetPreScalar(Copy_TIMx , Local_Prescalar);
 80004d2:	89ba      	ldrh	r2, [r7, #12]
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 f89b 	bl	8000614 <GPT_TIMx_SetPreScalar>
    #else
        #error "Wrong Tim Period"
        local_functionStates = E_NOT_OK;
        return local_functionStates;
    #endif
    GPT_TIMx_SetARRBuffer(Copy_TIMx , Copy_GPT_Config->ARB);
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	795a      	ldrb	r2, [r3, #5]
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	4611      	mov	r1, r2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f946 	bl	8000778 <GPT_TIMx_SetARRBuffer>
    GPT_TIMx_SetCountDIR(Copy_TIMx , Copy_GPT_Config->GPT_DIR);
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	789a      	ldrb	r2, [r3, #2]
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	4611      	mov	r1, r2
 80004f4:	4618      	mov	r0, r3
 80004f6:	f000 f81d 	bl	8000534 <GPT_TIMx_SetCountDIR>
    GPT_TIMx_PWM_SetAllignmentMode(Copy_TIMx , Copy_GPT_Config->AllignMode);
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	78da      	ldrb	r2, [r3, #3]
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	4611      	mov	r1, r2
 8000502:	4618      	mov	r0, r3
 8000504:	f000 fa50 	bl	80009a8 <GPT_TIMx_PWM_SetAllignmentMode>
    GPT_TIMx_SetClkDiv(Copy_TIMx , Copy_GPT_Config->CLK_Factor);
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	791a      	ldrb	r2, [r3, #4]
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f000 f8b3 	bl	800067c <GPT_TIMx_SetClkDiv>
    GPT_TIMx_SetInterrupt(Copy_TIMx , Copy_GPT_Config->INTState);
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	799a      	ldrb	r2, [r3, #6]
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4611      	mov	r1, r2
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f968 	bl	80007f4 <GPT_TIMx_SetInterrupt>
    //GPT_TIMx_Enable(Copy_TIMx);
    local_functionStates = E_OK;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 8000528:	7bfb      	ldrb	r3, [r7, #15]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <GPT_TIMx_SetCountDIR>:
    CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CEN );
    local_functionStates = E_OK;
    return local_functionStates;
}
Std_ReturnType GPT_TIMx_SetCountDIR(u8 Copy_GPT_TIMx,GPT_CountDir_t Copy_CLKCountDir)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	460a      	mov	r2, r1
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000544:	2300      	movs	r3, #0
 8000546:	73fb      	strb	r3, [r7, #15]
    switch (Copy_CLKCountDir)
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	2b02      	cmp	r3, #2
 800054c:	d028      	beq.n	80005a0 <GPT_TIMx_SetCountDIR+0x6c>
 800054e:	2b02      	cmp	r3, #2
 8000550:	dc53      	bgt.n	80005fa <GPT_TIMx_SetCountDIR+0xc6>
 8000552:	2b00      	cmp	r3, #0
 8000554:	d002      	beq.n	800055c <GPT_TIMx_SetCountDIR+0x28>
 8000556:	2b01      	cmp	r3, #1
 8000558:	d011      	beq.n	800057e <GPT_TIMx_SetCountDIR+0x4a>
 800055a:	e04e      	b.n	80005fa <GPT_TIMx_SetCountDIR+0xc6>
    {
    case UPCounter:
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_DIR );
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a2c      	ldr	r2, [pc, #176]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 8000560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	b29a      	uxth	r2, r3
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	4929      	ldr	r1, [pc, #164]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 800056c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000570:	f022 0210 	bic.w	r2, r2, #16
 8000574:	b292      	uxth	r2, r2
 8000576:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000578:	2301      	movs	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]
        break;
 800057c:	e042      	b.n	8000604 <GPT_TIMx_SetCountDIR+0xd0>
    case DOWNCounter:
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_DIR );
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4a23      	ldr	r2, [pc, #140]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 8000582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	b29a      	uxth	r2, r3
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	4920      	ldr	r1, [pc, #128]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 800058e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000592:	f042 0210 	orr.w	r2, r2, #16
 8000596:	b292      	uxth	r2, r2
 8000598:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 800059a:	2301      	movs	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
        break;
 800059e:	e031      	b.n	8000604 <GPT_TIMx_SetCountDIR+0xd0>
    case Center_AllignedMode:
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_DIR );
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 80005a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4918      	ldr	r1, [pc, #96]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 80005b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005b4:	f022 0210 	bic.w	r2, r2, #16
 80005b8:	b292      	uxth	r2, r2
 80005ba:	801a      	strh	r2, [r3, #0]
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS1 );
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 80005c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	4911      	ldr	r1, [pc, #68]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 80005cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005d4:	b292      	uxth	r2, r2
 80005d6:	801a      	strh	r2, [r3, #0]
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS0 );
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 80005dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	490a      	ldr	r1, [pc, #40]	; (8000610 <GPT_TIMx_SetCountDIR+0xdc>)
 80005e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005ec:	f022 0220 	bic.w	r2, r2, #32
 80005f0:	b292      	uxth	r2, r2
 80005f2:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 80005f4:	2301      	movs	r3, #1
 80005f6:	73fb      	strb	r3, [r7, #15]
        break;
 80005f8:	e004      	b.n	8000604 <GPT_TIMx_SetCountDIR+0xd0>
    default:
        local_functionStates = E_NOT_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]
        local_functionStates = E_NOT_OK;
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
        break;
 8000602:	bf00      	nop
    }
    return local_functionStates;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	20000000 	.word	0x20000000

08000614 <GPT_TIMx_SetPreScalar>:

Std_ReturnType GPT_TIMx_SetPreScalar(u8 Copy_GPT_TIMx,u16 Copy_PrescalarValue)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	460a      	mov	r2, r1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
    TIM[Copy_GPT_TIMx]->PSC = Copy_PrescalarValue;
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4a06      	ldr	r2, [pc, #24]	; (8000644 <GPT_TIMx_SetPreScalar+0x30>)
 800062c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000630:	88ba      	ldrh	r2, [r7, #4]
 8000632:	851a      	strh	r2, [r3, #40]	; 0x28
    local_functionStates = E_OK;
 8000634:	2301      	movs	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 8000638:	7bfb      	ldrb	r3, [r7, #15]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000000 	.word	0x20000000

08000648 <GPT_TIMx_SetPeriod>:
Std_ReturnType GPT_TIMx_SetPeriod(u8 Copy_TIMx,u16 Copy_Period)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
    TIM[Copy_TIMx]->ARR = Copy_Period;
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <GPT_TIMx_SetPeriod+0x30>)
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	88ba      	ldrh	r2, [r7, #4]
 8000666:	859a      	strh	r2, [r3, #44]	; 0x2c
    local_functionStates = E_OK;
 8000668:	2301      	movs	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	20000000 	.word	0x20000000

0800067c <GPT_TIMx_SetClkDiv>:
Std_ReturnType GPT_TIMx_SetClkDiv(u8 Copy_GPT_TIMx,GPT_CLKDiv_t Copy_CLKDivValue)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	460a      	mov	r2, r1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	4613      	mov	r3, r2
 800068a:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
    switch (Copy_CLKDivValue)
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d044      	beq.n	8000720 <GPT_TIMx_SetClkDiv+0xa4>
 8000696:	2b02      	cmp	r3, #2
 8000698:	dc61      	bgt.n	800075e <GPT_TIMx_SetClkDiv+0xe2>
 800069a:	2b00      	cmp	r3, #0
 800069c:	d002      	beq.n	80006a4 <GPT_TIMx_SetClkDiv+0x28>
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d01f      	beq.n	80006e2 <GPT_TIMx_SetClkDiv+0x66>
 80006a2:	e05c      	b.n	800075e <GPT_TIMx_SetClkDiv+0xe2>
    {
    case DIV_1:
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD0 );
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4a33      	ldr	r2, [pc, #204]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 80006a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4930      	ldr	r1, [pc, #192]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 80006b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80006bc:	b292      	uxth	r2, r2
 80006be:	801a      	strh	r2, [r3, #0]
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD1 );
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 80006c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4929      	ldr	r1, [pc, #164]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 80006d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006d8:	b292      	uxth	r2, r2
 80006da:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
        break;
 80006e0:	e042      	b.n	8000768 <GPT_TIMx_SetClkDiv+0xec>
    case DIV_2:
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD0 );
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4a23      	ldr	r2, [pc, #140]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 80006e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4920      	ldr	r1, [pc, #128]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 80006f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006fa:	b292      	uxth	r2, r2
 80006fc:	801a      	strh	r2, [r3, #0]
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD1 );
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 8000702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	b29a      	uxth	r2, r3
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4919      	ldr	r1, [pc, #100]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 800070e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000712:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000716:	b292      	uxth	r2, r2
 8000718:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 800071a:	2301      	movs	r3, #1
 800071c:	73fb      	strb	r3, [r7, #15]
        break;
 800071e:	e023      	b.n	8000768 <GPT_TIMx_SetClkDiv+0xec>
    case DIV_4:
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD0 );
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	4a14      	ldr	r2, [pc, #80]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 8000724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b29a      	uxth	r2, r3
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4911      	ldr	r1, [pc, #68]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 8000730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000738:	b292      	uxth	r2, r2
 800073a:	801a      	strh	r2, [r3, #0]
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD1 );
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 8000740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	b29a      	uxth	r2, r3
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	490a      	ldr	r1, [pc, #40]	; (8000774 <GPT_TIMx_SetClkDiv+0xf8>)
 800074c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000754:	b292      	uxth	r2, r2
 8000756:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000758:	2301      	movs	r3, #1
 800075a:	73fb      	strb	r3, [r7, #15]
        break;
 800075c:	e004      	b.n	8000768 <GPT_TIMx_SetClkDiv+0xec>
    default:
        local_functionStates = E_NOT_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	73fb      	strb	r3, [r7, #15]
        local_functionStates = E_NOT_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	73fb      	strb	r3, [r7, #15]
        break;
 8000766:	bf00      	nop
    }
    return local_functionStates;
 8000768:	7bfb      	ldrb	r3, [r7, #15]
}
 800076a:	4618      	mov	r0, r3
 800076c:	3714      	adds	r7, #20
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	20000000 	.word	0x20000000

08000778 <GPT_TIMx_SetARRBuffer>:
Std_ReturnType GPT_TIMx_SetARRBuffer(u8 Copy_GPT_TIMx,GPT_ArrBufferState_t Copy_ArrBufferState)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000788:	2300      	movs	r3, #0
 800078a:	73fb      	strb	r3, [r7, #15]
    switch (Copy_ArrBufferState)
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <GPT_TIMx_SetARRBuffer+0x20>
 8000792:	2b01      	cmp	r3, #1
 8000794:	d011      	beq.n	80007ba <GPT_TIMx_SetARRBuffer+0x42>
 8000796:	e021      	b.n	80007dc <GPT_TIMx_SetARRBuffer+0x64>
    {
    case Disaple_Arr_Buffer:
       CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMx_CR1_ARPE );
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <GPT_TIMx_SetARRBuffer+0x78>)
 800079c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4912      	ldr	r1, [pc, #72]	; (80007f0 <GPT_TIMx_SetARRBuffer+0x78>)
 80007a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007b0:	b292      	uxth	r2, r2
 80007b2:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
        break;
 80007b8:	e013      	b.n	80007e2 <GPT_TIMx_SetARRBuffer+0x6a>
    case Enable_Arr_Buffer :
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMx_CR1_ARPE );
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <GPT_TIMx_SetARRBuffer+0x78>)
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4909      	ldr	r1, [pc, #36]	; (80007f0 <GPT_TIMx_SetARRBuffer+0x78>)
 80007ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007d2:	b292      	uxth	r2, r2
 80007d4:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 80007d6:	2301      	movs	r3, #1
 80007d8:	73fb      	strb	r3, [r7, #15]
        break;
 80007da:	e002      	b.n	80007e2 <GPT_TIMx_SetARRBuffer+0x6a>
    default:
        local_functionStates = E_NOT_OK;
 80007dc:	2300      	movs	r3, #0
 80007de:	73fb      	strb	r3, [r7, #15]
        break;
 80007e0:	bf00      	nop
    }
    return local_functionStates;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bc80      	pop	{r7}
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000000 	.word	0x20000000

080007f4 <GPT_TIMx_SetInterrupt>:
Std_ReturnType GPT_TIMx_SetInterrupt(u8 Copy_GPT_TIMx,GPT_INTState_t Copy_INTState)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]
    switch (Copy_INTState)
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <GPT_TIMx_SetInterrupt+0x20>
 800080e:	2b01      	cmp	r3, #1
 8000810:	d011      	beq.n	8000836 <GPT_TIMx_SetInterrupt+0x42>
 8000812:	e021      	b.n	8000858 <GPT_TIMx_SetInterrupt+0x64>
    {
    case GPT_Disaple_Interrupt:
       CLR_BIT( TIM[Copy_GPT_TIMx]->DIER , TIMX_DIER_UIE );
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <GPT_TIMx_SetInterrupt+0x78>)
 8000818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800081c:	899b      	ldrh	r3, [r3, #12]
 800081e:	b29a      	uxth	r2, r3
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4912      	ldr	r1, [pc, #72]	; (800086c <GPT_TIMx_SetInterrupt+0x78>)
 8000824:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000828:	f022 0201 	bic.w	r2, r2, #1
 800082c:	b292      	uxth	r2, r2
 800082e:	819a      	strh	r2, [r3, #12]
        local_functionStates = E_OK;
 8000830:	2301      	movs	r3, #1
 8000832:	73fb      	strb	r3, [r7, #15]
        break;
 8000834:	e013      	b.n	800085e <GPT_TIMx_SetInterrupt+0x6a>
    case GPT_Enaple_Interrupt :
        SET_BIT( TIM[Copy_GPT_TIMx]->DIER , TIMX_DIER_UIE );
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <GPT_TIMx_SetInterrupt+0x78>)
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	899b      	ldrh	r3, [r3, #12]
 8000840:	b29a      	uxth	r2, r3
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	4909      	ldr	r1, [pc, #36]	; (800086c <GPT_TIMx_SetInterrupt+0x78>)
 8000846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800084a:	f042 0201 	orr.w	r2, r2, #1
 800084e:	b292      	uxth	r2, r2
 8000850:	819a      	strh	r2, [r3, #12]
        local_functionStates = E_OK;
 8000852:	2301      	movs	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
        break;
 8000856:	e002      	b.n	800085e <GPT_TIMx_SetInterrupt+0x6a>
    default:
        local_functionStates = E_NOT_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
        break;
 800085c:	bf00      	nop
    }
    return local_functionStates;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000

08000870 <GPT_TIMx_SetBusyWait>:
Std_ReturnType GPT_TIMx_SetBusyWait(u8 Copy_TIMx,u16 Copy_Ticks , u16 Copy_TickType)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	460b      	mov	r3, r1
 800087c:	80bb      	strh	r3, [r7, #4]
 800087e:	4613      	mov	r3, r2
 8000880:	807b      	strh	r3, [r7, #2]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
    TIM[Copy_TIMx]->ARR = (u16)(Copy_Ticks * Copy_TickType);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	88ba      	ldrh	r2, [r7, #4]
 8000890:	8879      	ldrh	r1, [r7, #2]
 8000892:	fb01 f202 	mul.w	r2, r1, r2
 8000896:	b292      	uxth	r2, r2
 8000898:	859a      	strh	r2, [r3, #44]	; 0x2c
    CLR_BIT( TIM[Copy_TIMx]->DIER , TIMX_DIER_UIE);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	899b      	ldrh	r3, [r3, #12]
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4923      	ldr	r1, [pc, #140]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 80008aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008ae:	f022 0201 	bic.w	r2, r2, #1
 80008b2:	b292      	uxth	r2, r2
 80008b4:	819a      	strh	r2, [r3, #12]
    SET_BIT( TIM[Copy_TIMx]->CR1 , TIMX_CR1_CEN );
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	491c      	ldr	r1, [pc, #112]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 80008c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008ca:	f042 0201 	orr.w	r2, r2, #1
 80008ce:	b292      	uxth	r2, r2
 80008d0:	801a      	strh	r2, [r3, #0]
    while(TIM[Copy_TIMx]->CNT != (TIM[Copy_TIMx]->ARR)-1);
 80008d2:	bf00      	nop
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 80008d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a14      	ldr	r2, [pc, #80]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 80008e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4299      	cmp	r1, r3
 80008f2:	d1ef      	bne.n	80008d4 <GPT_TIMx_SetBusyWait+0x64>
    TIM[Copy_TIMx]->CNT =0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 80008f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fc:	2200      	movs	r2, #0
 80008fe:	849a      	strh	r2, [r3, #36]	; 0x24
    CLR_BIT(TIM[Copy_TIMx]->CR1,TIMX_CR1_CEN);
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 8000904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29a      	uxth	r2, r3
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	490a      	ldr	r1, [pc, #40]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 8000910:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000914:	f022 0201 	bic.w	r2, r2, #1
 8000918:	b292      	uxth	r2, r2
 800091a:	801a      	strh	r2, [r3, #0]
    TIM[Copy_TIMx]->ARR = 0;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <GPT_TIMx_SetBusyWait+0xc8>)
 8000920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000924:	2200      	movs	r2, #0
 8000926:	859a      	strh	r2, [r3, #44]	; 0x2c
    local_functionStates = E_OK;
 8000928:	2301      	movs	r3, #1
 800092a:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
}
 800092e:	4618      	mov	r0, r3
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000000 	.word	0x20000000

0800093c <TIM1_UP_IRQHandler>:
        break;
    }
    return local_functionStates;
}
void TIM1_UP_IRQHandler (void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
    if(GPT_TIM1_GetIntervalMode() == TIM_SINGLE_INTERVAL_MODE)
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <TIM1_UP_IRQHandler+0x60>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	2b00      	cmp	r3, #0
 800094c:	d117      	bne.n	800097e <TIM1_UP_IRQHandler+0x42>
    {
        CLR_BIT( TIM[0]->DIER , TIMX_DIER_UIE );
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <TIM1_UP_IRQHandler+0x64>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	899b      	ldrh	r3, [r3, #12]
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <TIM1_UP_IRQHandler+0x64>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 0201 	bic.w	r2, r2, #1
 800095e:	b292      	uxth	r2, r2
 8000960:	819a      	strh	r2, [r3, #12]
        CLR_BIT( TIM[0]->CR1 , TIMX_CR1_CEN );
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <TIM1_UP_IRQHandler+0x64>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b29a      	uxth	r2, r3
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <TIM1_UP_IRQHandler+0x64>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0201 	bic.w	r2, r2, #1
 8000972:	b292      	uxth	r2, r2
 8000974:	801a      	strh	r2, [r3, #0]
        TIM[0]->ARR =0;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <TIM1_UP_IRQHandler+0x64>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2200      	movs	r2, #0
 800097c:	859a      	strh	r2, [r3, #44]	; 0x2c
    }else
    {

    }
    TIM1_CallBack();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <TIM1_UP_IRQHandler+0x68>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4798      	blx	r3
    CLR_BIT(TIM[0]->SR,TIMX_SR_UIF);
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <TIM1_UP_IRQHandler+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	8a1b      	ldrh	r3, [r3, #16]
 800098a:	b29a      	uxth	r2, r3
 800098c:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <TIM1_UP_IRQHandler+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 0201 	bic.w	r2, r2, #1
 8000994:	b292      	uxth	r2, r2
 8000996:	821a      	strh	r2, [r3, #16]

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000006c 	.word	0x2000006c
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000070 	.word	0x20000070

080009a8 <GPT_TIMx_PWM_SetAllignmentMode>:
    SET_BIT( TIM[Copy_TIMx]->EGR , TIMX_EGR_UG);
    local_functionStates = E_OK;
    return local_functionStates;
}
Std_ReturnType GPT_TIMx_PWM_SetAllignmentMode(u8 Copy_GPT_TIMx,GPT_PWM_AllignMode_t Copy_AllignMode)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	460a      	mov	r2, r1
 80009b2:	71fb      	strb	r3, [r7, #7]
 80009b4:	4613      	mov	r3, r2
 80009b6:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
    switch (Copy_AllignMode)
 80009bc:	79bb      	ldrb	r3, [r7, #6]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d002      	beq.n	80009c8 <GPT_TIMx_PWM_SetAllignmentMode+0x20>
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d01f      	beq.n	8000a06 <GPT_TIMx_PWM_SetAllignmentMode+0x5e>
        CLR_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS0);
        SET_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS1);
        local_functionStates = E_OK;
        break;
    default:
        break;
 80009c6:	e03d      	b.n	8000a44 <GPT_TIMx_PWM_SetAllignmentMode+0x9c>
        CLR_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS0);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	491e      	ldr	r1, [pc, #120]	; (8000a50 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80009d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009dc:	f022 0220 	bic.w	r2, r2, #32
 80009e0:	b292      	uxth	r2, r2
 80009e2:	801a      	strh	r2, [r3, #0]
        CLR_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS1);
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4a1a      	ldr	r2, [pc, #104]	; (8000a50 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80009e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	4917      	ldr	r1, [pc, #92]	; (8000a50 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80009f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009fc:	b292      	uxth	r2, r2
 80009fe:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000a00:	2301      	movs	r3, #1
 8000a02:	73fb      	strb	r3, [r7, #15]
        break;
 8000a04:	e01e      	b.n	8000a44 <GPT_TIMx_PWM_SetAllignmentMode+0x9c>
        CLR_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS0);
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	490e      	ldr	r1, [pc, #56]	; (8000a50 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 8000a16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a1a:	f022 0220 	bic.w	r2, r2, #32
 8000a1e:	b292      	uxth	r2, r2
 8000a20:	801a      	strh	r2, [r3, #0]
        SET_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS1);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4907      	ldr	r1, [pc, #28]	; (8000a50 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 8000a32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a3a:	b292      	uxth	r2, r2
 8000a3c:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
        break;
 8000a42:	bf00      	nop
    }
    return local_functionStates;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	20000000 	.word	0x20000000

08000a54 <MCAL_RCC_InitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"
#include "RCC_interface.h"
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71fb      	strb	r3, [r7, #7]
    #if RCC_SYSCLK == RCC_HSI
        /* Enable HSI */
        SET_BIT( RCC_CR , RCC_CR_HSION);
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <MCAL_RCC_InitSysClock+0x4c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <MCAL_RCC_InitSysClock+0x4c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6013      	str	r3, [r2, #0]
        /* Wait until the clock is stable */
        while( !GET_BIT( RCC_CR , RCC_CR_HSIRDY ) );
 8000a6a:	bf00      	nop
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MCAL_RCC_InitSysClock+0x4c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f9      	beq.n	8000a6c <MCAL_RCC_InitSysClock+0x18>
        /* Select the HSI As system CLOCK */
        CLR_BIT( RCC_CFGR , 0 );
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MCAL_RCC_InitSysClock+0x50>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <MCAL_RCC_InitSysClock+0x50>)
 8000a7e:	f023 0301 	bic.w	r3, r3, #1
 8000a82:	6013      	str	r3, [r2, #0]
        CLR_BIT( RCC_CFGR , 1 );
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <MCAL_RCC_InitSysClock+0x50>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <MCAL_RCC_InitSysClock+0x50>)
 8000a8a:	f023 0302 	bic.w	r3, r3, #2
 8000a8e:	6013      	str	r3, [r2, #0]
        local_functionStates = E_OK;
 8000a90:	2301      	movs	r3, #1
 8000a92:	71fb      	strb	r3, [r7, #7]
            #error "Wrong Choice !!"
        #endif /* RCC_PLL_SRC */
    #else 
        #error "Wrong Choice !!"
    #endif /* RCC_SYSCLK */
    return local_functionStates;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40021004 	.word	0x40021004

08000aa8 <MCAL_Rcc_EnablePrephiral>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_Rcc_EnablePrephiral(u8 Copy_PeripheralId , u8 Copy_BusId)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
    switch (Copy_BusId)
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d020      	beq.n	8000b04 <MCAL_Rcc_EnablePrephiral+0x5c>
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	dc2b      	bgt.n	8000b1e <MCAL_Rcc_EnablePrephiral+0x76>
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <MCAL_Rcc_EnablePrephiral+0x28>
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d00d      	beq.n	8000aea <MCAL_Rcc_EnablePrephiral+0x42>
 8000ace:	e026      	b.n	8000b1e <MCAL_Rcc_EnablePrephiral+0x76>
    {
    case RCC_AHB:
    SET_BIT( RCC_AHBENR , Copy_PeripheralId );
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	79fa      	ldrb	r2, [r7, #7]
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8000adc:	4611      	mov	r1, r2
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000ae0:	430b      	orrs	r3, r1
 8000ae2:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8000ae8:	e01c      	b.n	8000b24 <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB1:
    SET_BIT ( RCC_AHBENR , Copy_PeripheralId );
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	2101      	movs	r1, #1
 8000af2:	fa01 f202 	lsl.w	r2, r1, r2
 8000af6:	4611      	mov	r1, r2
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <MCAL_Rcc_EnablePrephiral+0x88>)
 8000afa:	430b      	orrs	r3, r1
 8000afc:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000afe:	2301      	movs	r3, #1
 8000b00:	73fb      	strb	r3, [r7, #15]
    break;
 8000b02:	e00f      	b.n	8000b24 <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB2:
    SET_BIT ( RCC_APB2ENR , Copy_PeripheralId );
 8000b04:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MCAL_Rcc_EnablePrephiral+0x8c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <MCAL_Rcc_EnablePrephiral+0x8c>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8000b1c:	e002      	b.n	8000b24 <MCAL_Rcc_EnablePrephiral+0x7c>
    default:
    local_functionStates =E_NOT_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	73fb      	strb	r3, [r7, #15]
    break;
 8000b22:	bf00      	nop
    }
    return local_functionStates;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40021014 	.word	0x40021014
 8000b34:	40021018 	.word	0x40021018

08000b38 <SysTick_Handler>:
/**
 * @defgroup IRQ_Handlers IRQ Handlers
 * @{
 */
void SysTick_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    if (SYSTICK_Callback != NULL)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <SysTick_Handler+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d01e      	beq.n	8000b82 <SysTick_Handler+0x4a>
    {
        if (SYSTICK_ModeOfInterval == SYSTICK_SINGLE_INTERVAL)
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <SysTick_Handler+0x54>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d111      	bne.n	8000b70 <SysTick_Handler+0x38>
        {
            /**< Disable interrupt when the counter reaches zero */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_TICKINT_MASK;
 8000b4c:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <SysTick_Handler+0x58>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <SysTick_Handler+0x58>)
 8000b52:	f023 0302 	bic.w	r3, r3, #2
 8000b56:	6013      	str	r3, [r2, #0]
            /**< Disable SysTick timer */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <SysTick_Handler+0x58>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <SysTick_Handler+0x58>)
 8000b5e:	f023 0301 	bic.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]
            /**< Clear the current value */
            SYSTICK->LOAD=0;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <SysTick_Handler+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
            /**< Set the reload value to 0 */
            SYSTICK->VAL=0;
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <SysTick_Handler+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
        }
        /**< Callback notification */
        SYSTICK_Callback();
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <SysTick_Handler+0x50>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4798      	blx	r3
        /**< Clear the count/interrupt flag */
        SYSTICK->CTRL &= ~SYSTICK_CTRL_COUNTFLAG_MASK;
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SysTick_Handler+0x58>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SysTick_Handler+0x58>)
 8000b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b80:	6013      	str	r3, [r2, #0]
    }
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000074 	.word	0x20000074
 8000b8c:	20000078 	.word	0x20000078
 8000b90:	e000e010 	.word	0xe000e010

08000b94 <main>:
#include "RCC_interface.h"
#include "GPIO_interface.h"
#include "GPT_interface.h"

int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	/*CLK INIT*/
	MCAL_RCC_InitSysClock();
 8000b9a:	f7ff ff5b 	bl	8000a54 <MCAL_RCC_InitSysClock>
	MCAL_Rcc_EnablePrephiral(RCC_APB2_TIM1EN, RCC_APB2);
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	200b      	movs	r0, #11
 8000ba2:	f7ff ff81 	bl	8000aa8 <MCAL_Rcc_EnablePrephiral>
	MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPAEN, RCC_APB2);
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f7ff ff7d 	bl	8000aa8 <MCAL_Rcc_EnablePrephiral>
	MCAL_GPIO_SetPinMode(GPIO_PORTA, GPIO_PIN1, GPIO_OUTPUT_LOW_SPEED_PUSHPULL);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f7ff fb0e 	bl	80001d4 <MCAL_GPIO_SetPinMode>
	/*TIM 2 INIT*/
	GPT_Config_t Tim1_Config={1000,UPCounter,Edge_AllignedMode,DIV_1,Enable_Arr_Buffer,GPT_Enaple_Interrupt};
 8000bb8:	4a13      	ldr	r2, [pc, #76]	; (8000c08 <main+0x74>)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc0:	e883 0003 	stmia.w	r3, {r0, r1}
	GPT_TIMx_init(TIM1,&Tim1_Config);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff fc71 	bl	80004b0 <GPT_TIMx_init>
	GPT_TIMx_SetPreScalar(TIM1,35999);
 8000bce:	f648 419f 	movw	r1, #35999	; 0x8c9f
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fd1e 	bl	8000614 <GPT_TIMx_SetPreScalar>
    /* Loop forever */
	for(;;)
	{
		MCAL_GPIO_SetPinValue(GPIO_PORTA, GPIO_PIN1, GPIO_HIGH);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2101      	movs	r1, #1
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f7ff fbd7 	bl	8000390 <MCAL_GPIO_SetPinValue>
		GPT_TIMx_SetBusyWait(TIM1, 1000, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff fe41 	bl	8000870 <GPT_TIMx_SetBusyWait>
		MCAL_GPIO_SetPinValue(GPIO_PORTA, GPIO_PIN1, GPIO_LOW);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fbcc 	bl	8000390 <MCAL_GPIO_SetPinValue>
		GPT_TIMx_SetBusyWait(TIM1, 1000, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fe36 	bl	8000870 <GPT_TIMx_SetBusyWait>
		MCAL_GPIO_SetPinValue(GPIO_PORTA, GPIO_PIN1, GPIO_HIGH);
 8000c04:	e7e8      	b.n	8000bd8 <main+0x44>
 8000c06:	bf00      	nop
 8000c08:	08000cc0 	.word	0x08000cc0

08000c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3a:	f000 f811 	bl	8000c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff ffa9 	bl	8000b94 <main>

08000c42 <LoopForever>:

LoopForever:
  b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c50:	08000cd0 	.word	0x08000cd0
  ldr r2, =_sbss
 8000c54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c58:	2000007c 	.word	0x2000007c

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>
	...

08000c60 <__libc_init_array>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	2600      	movs	r6, #0
 8000c64:	4d0c      	ldr	r5, [pc, #48]	; (8000c98 <__libc_init_array+0x38>)
 8000c66:	4c0d      	ldr	r4, [pc, #52]	; (8000c9c <__libc_init_array+0x3c>)
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	10a4      	asrs	r4, r4, #2
 8000c6c:	42a6      	cmp	r6, r4
 8000c6e:	d109      	bne.n	8000c84 <__libc_init_array+0x24>
 8000c70:	f000 f81a 	bl	8000ca8 <_init>
 8000c74:	2600      	movs	r6, #0
 8000c76:	4d0a      	ldr	r5, [pc, #40]	; (8000ca0 <__libc_init_array+0x40>)
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <__libc_init_array+0x44>)
 8000c7a:	1b64      	subs	r4, r4, r5
 8000c7c:	10a4      	asrs	r4, r4, #2
 8000c7e:	42a6      	cmp	r6, r4
 8000c80:	d105      	bne.n	8000c8e <__libc_init_array+0x2e>
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
 8000c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c88:	4798      	blx	r3
 8000c8a:	3601      	adds	r6, #1
 8000c8c:	e7ee      	b.n	8000c6c <__libc_init_array+0xc>
 8000c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c92:	4798      	blx	r3
 8000c94:	3601      	adds	r6, #1
 8000c96:	e7f2      	b.n	8000c7e <__libc_init_array+0x1e>
 8000c98:	08000cc8 	.word	0x08000cc8
 8000c9c:	08000cc8 	.word	0x08000cc8
 8000ca0:	08000cc8 	.word	0x08000cc8
 8000ca4:	08000ccc 	.word	0x08000ccc

08000ca8 <_init>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	bf00      	nop
 8000cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cae:	bc08      	pop	{r3}
 8000cb0:	469e      	mov	lr, r3
 8000cb2:	4770      	bx	lr

08000cb4 <_fini>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	bf00      	nop
 8000cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cba:	bc08      	pop	{r3}
 8000cbc:	469e      	mov	lr, r3
 8000cbe:	4770      	bx	lr
