
GPT_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016e0  080016e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080016e0  080016e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016e0  080016e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016e0  080016e0  000116e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016e4  080016e4  000116e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080016e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  080016f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080016f8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f84  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000077f  00000000  00000000  00021fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000338  00000000  00000000  00022740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  00022a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000008ff  00000000  00000000  00022d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015fa  00000000  00000000  00023647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000057d3  00000000  00000000  00024c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002a414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d00  00000000  00000000  0002a464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	080016b8 	.word	0x080016b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	080016b8 	.word	0x080016b8

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <EXTI0_IRQHandler>:
    return Local_FunctionStatus;
}
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI0_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE0]();
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <EXTI0_IRQHandler+0x10>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4798      	blx	r3
    }
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000002c 	.word	0x2000002c

08000960 <EXTI1_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE1]();
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <EXTI1_IRQHandler+0x10>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4798      	blx	r3
    }
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000002c 	.word	0x2000002c

08000974 <EXTI2_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE2]();
 8000978:	4b02      	ldr	r3, [pc, #8]	; (8000984 <EXTI2_IRQHandler+0x10>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4798      	blx	r3
    }
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000002c 	.word	0x2000002c

08000988 <EXTI3_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI3_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE3]();
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <EXTI3_IRQHandler+0x10>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	4798      	blx	r3
    }
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000002c 	.word	0x2000002c

0800099c <EXTI4_IRQHandler>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void EXTI4_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    if (EXTI_Callback != NULL)
    {
        EXTI_Callback[EXTI_LINE4]();
 80009a0:	4b02      	ldr	r3, [pc, #8]	; (80009ac <EXTI4_IRQHandler+0x10>)
 80009a2:	691b      	ldr	r3, [r3, #16]
 80009a4:	4798      	blx	r3
    }
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000002c 	.word	0x2000002c

080009b0 <MCAL_GPIO_SetPinMode>:
#include "GPIO_private.h"
#include "GPIO_config.h"
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_GPIO_SetPinMode(u8 Copy_PortID , u8 Copy_PinID , u8 Copy_PinMode)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	460b      	mov	r3, r1
 80009bc:	71bb      	strb	r3, [r7, #6]
 80009be:	4613      	mov	r3, r2
 80009c0:	717b      	strb	r3, [r7, #5]
    Std_ReturnType Local_FunctionStatus = E_NOT_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73fb      	strb	r3, [r7, #15]
    switch (Copy_PortID)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	f000 8082 	beq.w	8000ad2 <MCAL_GPIO_SetPinMode+0x122>
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	f300 80bc 	bgt.w	8000b4c <MCAL_GPIO_SetPinMode+0x19c>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <MCAL_GPIO_SetPinMode+0x2e>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d03d      	beq.n	8000a58 <MCAL_GPIO_SetPinMode+0xa8>
 80009dc:	e0b6      	b.n	8000b4c <MCAL_GPIO_SetPinMode+0x19c>
    {
    case GPIO_PORTA:
        if( Copy_PinID < 8 )
 80009de:	79bb      	ldrb	r3, [r7, #6]
 80009e0:	2b07      	cmp	r3, #7
 80009e2:	d819      	bhi.n	8000a18 <MCAL_GPIO_SetPinMode+0x68>
        {
            MCAL_GPIOA->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 80009e4:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <MCAL_GPIO_SetPinMode+0x1b0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	79ba      	ldrb	r2, [r7, #6]
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	210f      	movs	r1, #15
 80009ee:	fa01 f202 	lsl.w	r2, r1, r2
 80009f2:	43d2      	mvns	r2, r2
 80009f4:	4611      	mov	r1, r2
 80009f6:	4a5a      	ldr	r2, [pc, #360]	; (8000b60 <MCAL_GPIO_SetPinMode+0x1b0>)
 80009f8:	400b      	ands	r3, r1
 80009fa:	6013      	str	r3, [r2, #0]
            MCAL_GPIOA->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 80009fc:	4b58      	ldr	r3, [pc, #352]	; (8000b60 <MCAL_GPIO_SetPinMode+0x1b0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	7979      	ldrb	r1, [r7, #5]
 8000a02:	79ba      	ldrb	r2, [r7, #6]
 8000a04:	0092      	lsls	r2, r2, #2
 8000a06:	fa01 f202 	lsl.w	r2, r1, r2
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4a54      	ldr	r2, [pc, #336]	; (8000b60 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000a0e:	430b      	orrs	r3, r1
 8000a10:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 8000a16:	e09c      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d819      	bhi.n	8000a52 <MCAL_GPIO_SetPinMode+0xa2>
            MCAL_GPIOA->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000a1e:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	79ba      	ldrb	r2, [r7, #6]
 8000a24:	0092      	lsls	r2, r2, #2
 8000a26:	210f      	movs	r1, #15
 8000a28:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2c:	43d2      	mvns	r2, r2
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000a32:	400b      	ands	r3, r1
 8000a34:	6053      	str	r3, [r2, #4]
            MCAL_GPIOA->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000a36:	4b4a      	ldr	r3, [pc, #296]	; (8000b60 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	7979      	ldrb	r1, [r7, #5]
 8000a3c:	79ba      	ldrb	r2, [r7, #6]
 8000a3e:	0092      	lsls	r2, r2, #2
 8000a40:	fa01 f202 	lsl.w	r2, r1, r2
 8000a44:	4611      	mov	r1, r2
 8000a46:	4a46      	ldr	r2, [pc, #280]	; (8000b60 <MCAL_GPIO_SetPinMode+0x1b0>)
 8000a48:	430b      	orrs	r3, r1
 8000a4a:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8000a50:	e07f      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]
    break;
 8000a56:	e07c      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
    case GPIO_PORTB:
        if( Copy_PinID < 8 )
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	d819      	bhi.n	8000a92 <MCAL_GPIO_SetPinMode+0xe2>
        {
            MCAL_GPIOB->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	79ba      	ldrb	r2, [r7, #6]
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	210f      	movs	r1, #15
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4a3c      	ldr	r2, [pc, #240]	; (8000b64 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000a72:	400b      	ands	r3, r1
 8000a74:	6013      	str	r3, [r2, #0]
            MCAL_GPIOB->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000a76:	4b3b      	ldr	r3, [pc, #236]	; (8000b64 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	7979      	ldrb	r1, [r7, #5]
 8000a7c:	79ba      	ldrb	r2, [r7, #6]
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	fa01 f202 	lsl.w	r2, r1, r2
 8000a84:	4611      	mov	r1, r2
 8000a86:	4a37      	ldr	r2, [pc, #220]	; (8000b64 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 8000a90:	e05f      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d819      	bhi.n	8000acc <MCAL_GPIO_SetPinMode+0x11c>
            MCAL_GPIOB->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000a98:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	79ba      	ldrb	r2, [r7, #6]
 8000a9e:	0092      	lsls	r2, r2, #2
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	43d2      	mvns	r2, r2
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a2e      	ldr	r2, [pc, #184]	; (8000b64 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000aac:	400b      	ands	r3, r1
 8000aae:	6053      	str	r3, [r2, #4]
            MCAL_GPIOB->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000ab0:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	7979      	ldrb	r1, [r7, #5]
 8000ab6:	79ba      	ldrb	r2, [r7, #6]
 8000ab8:	0092      	lsls	r2, r2, #2
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <MCAL_GPIO_SetPinMode+0x1b4>)
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8000aca:	e042      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	73fb      	strb	r3, [r7, #15]
    break;
 8000ad0:	e03f      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
    case GPIO_PORTC:
        if( Copy_PinID < 8 )
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	2b07      	cmp	r3, #7
 8000ad6:	d819      	bhi.n	8000b0c <MCAL_GPIO_SetPinMode+0x15c>
        {
            MCAL_GPIOC->CRL &= ~( (0b1111) << (Copy_PinID*4) );
 8000ad8:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	79ba      	ldrb	r2, [r7, #6]
 8000ade:	0092      	lsls	r2, r2, #2
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae6:	43d2      	mvns	r2, r2
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000aec:	400b      	ands	r3, r1
 8000aee:	6013      	str	r3, [r2, #0]
            MCAL_GPIOC->CRL |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	7979      	ldrb	r1, [r7, #5]
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6013      	str	r3, [r2, #0]
            Local_FunctionStatus = E_OK;
 8000b06:	2301      	movs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
        }
        else
        {
            Local_FunctionStatus = E_NOT_OK;
        }
    break;
 8000b0a:	e022      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
        }else if ( Copy_PinID < 16)
 8000b0c:	79bb      	ldrb	r3, [r7, #6]
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d819      	bhi.n	8000b46 <MCAL_GPIO_SetPinMode+0x196>
            MCAL_GPIOC->CRH &= ~( (0b1111) << (Copy_PinID*4) );
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	79ba      	ldrb	r2, [r7, #6]
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b20:	43d2      	mvns	r2, r2
 8000b22:	4611      	mov	r1, r2
 8000b24:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000b26:	400b      	ands	r3, r1
 8000b28:	6053      	str	r3, [r2, #4]
            MCAL_GPIOC->CRH |= ( (Copy_PinMode) << (Copy_PinID*4) );
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	7979      	ldrb	r1, [r7, #5]
 8000b30:	79ba      	ldrb	r2, [r7, #6]
 8000b32:	0092      	lsls	r2, r2, #2
 8000b34:	fa01 f202 	lsl.w	r2, r1, r2
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <MCAL_GPIO_SetPinMode+0x1b8>)
 8000b3c:	430b      	orrs	r3, r1
 8000b3e:	6053      	str	r3, [r2, #4]
            Local_FunctionStatus = E_OK;
 8000b40:	2301      	movs	r3, #1
 8000b42:	73fb      	strb	r3, [r7, #15]
    break;
 8000b44:	e005      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
            Local_FunctionStatus = E_NOT_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	73fb      	strb	r3, [r7, #15]
    break;
 8000b4a:	e002      	b.n	8000b52 <MCAL_GPIO_SetPinMode+0x1a2>
    default:
            Local_FunctionStatus = E_NOT_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8000b50:	bf00      	nop
    }
    return Local_FunctionStatus;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40010800 	.word	0x40010800
 8000b64:	40010c00 	.word	0x40010c00
 8000b68:	40011000 	.word	0x40011000

08000b6c <GPT_TIMx_init>:
static void (*TIM2_CallBack)(void);
static void (*TIM3_CallBack)(void);
static void (*TIM4_CallBack)(void);

Std_ReturnType GPT_TIMx_init(u8 Copy_TIMx,GPT_Config_t* Copy_GPT_Config)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]
    GPT_TIMx_SetPeriod(Copy_TIMx,Copy_GPT_Config->ARR);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	881a      	ldrh	r2, [r3, #0]
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f8bd 	bl	8000d04 <GPT_TIMx_SetPeriod>
    #if TIM_Ratio == MilliSeconds
        u16 Local_Prescalar = (u16)(TIM_Clk_Freq / 1000000)-1;
 8000b8a:	2323      	movs	r3, #35	; 0x23
 8000b8c:	81bb      	strh	r3, [r7, #12]
        GPT_TIMx_SetPreScalar(Copy_TIMx , Local_Prescalar);
 8000b8e:	89ba      	ldrh	r2, [r7, #12]
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 f89b 	bl	8000cd0 <GPT_TIMx_SetPreScalar>
    #else
        #error "Wrong Tim Period"
        local_functionStates = E_NOT_OK;
        return local_functionStates;
    #endif
    GPT_TIMx_SetARRBuffer(Copy_TIMx , Copy_GPT_Config->ARB);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	795a      	ldrb	r2, [r3, #5]
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f946 	bl	8000e34 <GPT_TIMx_SetARRBuffer>
    GPT_TIMx_SetCountDIR(Copy_TIMx , Copy_GPT_Config->GPT_DIR);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	789a      	ldrb	r2, [r3, #2]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f81d 	bl	8000bf0 <GPT_TIMx_SetCountDIR>
    GPT_TIMx_PWM_SetAllignmentMode(Copy_TIMx , Copy_GPT_Config->AllignMode);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	78da      	ldrb	r2, [r3, #3]
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 fa4a 	bl	8001058 <GPT_TIMx_PWM_SetAllignmentMode>
    GPT_TIMx_SetClkDiv(Copy_TIMx , Copy_GPT_Config->CLK_Factor);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	791a      	ldrb	r2, [r3, #4]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f8b3 	bl	8000d38 <GPT_TIMx_SetClkDiv>
    GPT_TIMx_SetInterrupt(Copy_TIMx , Copy_GPT_Config->INTState);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	799a      	ldrb	r2, [r3, #6]
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f968 	bl	8000eb0 <GPT_TIMx_SetInterrupt>
    //GPT_TIMx_Enable(Copy_TIMx);
    local_functionStates = E_OK;
 8000be0:	2301      	movs	r3, #1
 8000be2:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <GPT_TIMx_SetCountDIR>:
    CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CEN );
    local_functionStates = E_OK;
    return local_functionStates;
}
Std_ReturnType GPT_TIMx_SetCountDIR(u8 Copy_GPT_TIMx,GPT_CountDir_t Copy_CLKCountDir)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
    switch (Copy_CLKCountDir)
 8000c04:	79bb      	ldrb	r3, [r7, #6]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d028      	beq.n	8000c5c <GPT_TIMx_SetCountDIR+0x6c>
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	dc53      	bgt.n	8000cb6 <GPT_TIMx_SetCountDIR+0xc6>
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d002      	beq.n	8000c18 <GPT_TIMx_SetCountDIR+0x28>
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d011      	beq.n	8000c3a <GPT_TIMx_SetCountDIR+0x4a>
 8000c16:	e04e      	b.n	8000cb6 <GPT_TIMx_SetCountDIR+0xc6>
    {
    case UPCounter:
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_DIR );
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	4929      	ldr	r1, [pc, #164]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c2c:	f022 0210 	bic.w	r2, r2, #16
 8000c30:	b292      	uxth	r2, r2
 8000c32:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
        break;
 8000c38:	e042      	b.n	8000cc0 <GPT_TIMx_SetCountDIR+0xd0>
    case DOWNCounter:
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_DIR );
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	4920      	ldr	r1, [pc, #128]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c4e:	f042 0210 	orr.w	r2, r2, #16
 8000c52:	b292      	uxth	r2, r2
 8000c54:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000c56:	2301      	movs	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
        break;
 8000c5a:	e031      	b.n	8000cc0 <GPT_TIMx_SetCountDIR+0xd0>
    case Center_AllignedMode:
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_DIR );
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	4918      	ldr	r1, [pc, #96]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c70:	f022 0210 	bic.w	r2, r2, #16
 8000c74:	b292      	uxth	r2, r2
 8000c76:	801a      	strh	r2, [r3, #0]
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS1 );
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4a14      	ldr	r2, [pc, #80]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4911      	ldr	r1, [pc, #68]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c90:	b292      	uxth	r2, r2
 8000c92:	801a      	strh	r2, [r3, #0]
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS0 );
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	490a      	ldr	r1, [pc, #40]	; (8000ccc <GPT_TIMx_SetCountDIR+0xdc>)
 8000ca4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ca8:	f022 0220 	bic.w	r2, r2, #32
 8000cac:	b292      	uxth	r2, r2
 8000cae:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
        break;
 8000cb4:	e004      	b.n	8000cc0 <GPT_TIMx_SetCountDIR+0xd0>
    default:
        local_functionStates = E_NOT_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
        local_functionStates = E_NOT_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8000cbe:	bf00      	nop
    }
    return local_functionStates;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	20000000 	.word	0x20000000

08000cd0 <GPT_TIMx_SetPreScalar>:

Std_ReturnType GPT_TIMx_SetPreScalar(u8 Copy_GPT_TIMx,u16 Copy_PrescalarValue)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460a      	mov	r2, r1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
    TIM[Copy_GPT_TIMx]->PSC = Copy_PrescalarValue;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <GPT_TIMx_SetPreScalar+0x30>)
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	88ba      	ldrh	r2, [r7, #4]
 8000cee:	851a      	strh	r2, [r3, #40]	; 0x28
    local_functionStates = E_OK;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	20000000 	.word	0x20000000

08000d04 <GPT_TIMx_SetPeriod>:
Std_ReturnType GPT_TIMx_SetPeriod(u8 Copy_TIMx,u16 Copy_Period)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	80bb      	strh	r3, [r7, #4]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
    TIM[Copy_TIMx]->ARR = Copy_Period;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <GPT_TIMx_SetPeriod+0x30>)
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	88ba      	ldrh	r2, [r7, #4]
 8000d22:	859a      	strh	r2, [r3, #44]	; 0x2c
    local_functionStates = E_OK;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20000000 	.word	0x20000000

08000d38 <GPT_TIMx_SetClkDiv>:
Std_ReturnType GPT_TIMx_SetClkDiv(u8 Copy_GPT_TIMx,GPT_CLKDiv_t Copy_CLKDivValue)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	460a      	mov	r2, r1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	4613      	mov	r3, r2
 8000d46:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
    switch (Copy_CLKDivValue)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d044      	beq.n	8000ddc <GPT_TIMx_SetClkDiv+0xa4>
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	dc61      	bgt.n	8000e1a <GPT_TIMx_SetClkDiv+0xe2>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <GPT_TIMx_SetClkDiv+0x28>
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d01f      	beq.n	8000d9e <GPT_TIMx_SetClkDiv+0x66>
 8000d5e:	e05c      	b.n	8000e1a <GPT_TIMx_SetClkDiv+0xe2>
    {
    case DIV_1:
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD0 );
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	4a33      	ldr	r2, [pc, #204]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4930      	ldr	r1, [pc, #192]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d78:	b292      	uxth	r2, r2
 8000d7a:	801a      	strh	r2, [r3, #0]
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD1 );
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4a2c      	ldr	r2, [pc, #176]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	4929      	ldr	r1, [pc, #164]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d94:	b292      	uxth	r2, r2
 8000d96:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
        break;
 8000d9c:	e042      	b.n	8000e24 <GPT_TIMx_SetClkDiv+0xec>
    case DIV_2:
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD0 );
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4920      	ldr	r1, [pc, #128]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000db6:	b292      	uxth	r2, r2
 8000db8:	801a      	strh	r2, [r3, #0]
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD1 );
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4919      	ldr	r1, [pc, #100]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dd2:	b292      	uxth	r2, r2
 8000dd4:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8000dda:	e023      	b.n	8000e24 <GPT_TIMx_SetClkDiv+0xec>
    case DIV_4:
        CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD0 );
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4911      	ldr	r1, [pc, #68]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000dec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000df4:	b292      	uxth	r2, r2
 8000df6:	801a      	strh	r2, [r3, #0]
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CKD1 );
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	490a      	ldr	r1, [pc, #40]	; (8000e30 <GPT_TIMx_SetClkDiv+0xf8>)
 8000e08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e10:	b292      	uxth	r2, r2
 8000e12:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
        break;
 8000e18:	e004      	b.n	8000e24 <GPT_TIMx_SetClkDiv+0xec>
    default:
        local_functionStates = E_NOT_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
        local_functionStates = E_NOT_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
        break;
 8000e22:	bf00      	nop
    }
    return local_functionStates;
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	20000000 	.word	0x20000000

08000e34 <GPT_TIMx_SetARRBuffer>:
Std_ReturnType GPT_TIMx_SetARRBuffer(u8 Copy_GPT_TIMx,GPT_ArrBufferState_t Copy_ArrBufferState)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	4613      	mov	r3, r2
 8000e42:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
    switch (Copy_ArrBufferState)
 8000e48:	79bb      	ldrb	r3, [r7, #6]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <GPT_TIMx_SetARRBuffer+0x20>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d011      	beq.n	8000e76 <GPT_TIMx_SetARRBuffer+0x42>
 8000e52:	e021      	b.n	8000e98 <GPT_TIMx_SetARRBuffer+0x64>
    {
    case Disaple_Arr_Buffer:
       CLR_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMx_CR1_ARPE );
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	4a15      	ldr	r2, [pc, #84]	; (8000eac <GPT_TIMx_SetARRBuffer+0x78>)
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4912      	ldr	r1, [pc, #72]	; (8000eac <GPT_TIMx_SetARRBuffer+0x78>)
 8000e64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e6c:	b292      	uxth	r2, r2
 8000e6e:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
        break;
 8000e74:	e013      	b.n	8000e9e <GPT_TIMx_SetARRBuffer+0x6a>
    case Enable_Arr_Buffer :
        SET_BIT( TIM[Copy_GPT_TIMx]->CR1 , TIMx_CR1_ARPE );
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <GPT_TIMx_SetARRBuffer+0x78>)
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	4909      	ldr	r1, [pc, #36]	; (8000eac <GPT_TIMx_SetARRBuffer+0x78>)
 8000e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 8000e92:	2301      	movs	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
        break;
 8000e96:	e002      	b.n	8000e9e <GPT_TIMx_SetARRBuffer+0x6a>
    default:
        local_functionStates = E_NOT_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
        break;
 8000e9c:	bf00      	nop
    }
    return local_functionStates;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000

08000eb0 <GPT_TIMx_SetInterrupt>:
Std_ReturnType GPT_TIMx_SetInterrupt(u8 Copy_GPT_TIMx,GPT_INTState_t Copy_INTState)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]
    switch (Copy_INTState)
 8000ec4:	79bb      	ldrb	r3, [r7, #6]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <GPT_TIMx_SetInterrupt+0x20>
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d011      	beq.n	8000ef2 <GPT_TIMx_SetInterrupt+0x42>
 8000ece:	e021      	b.n	8000f14 <GPT_TIMx_SetInterrupt+0x64>
    {
    case GPT_Disaple_Interrupt:
       CLR_BIT( TIM[Copy_GPT_TIMx]->DIER , TIMX_DIER_UIE );
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	4a15      	ldr	r2, [pc, #84]	; (8000f28 <GPT_TIMx_SetInterrupt+0x78>)
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	899b      	ldrh	r3, [r3, #12]
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4912      	ldr	r1, [pc, #72]	; (8000f28 <GPT_TIMx_SetInterrupt+0x78>)
 8000ee0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ee4:	f022 0201 	bic.w	r2, r2, #1
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	819a      	strh	r2, [r3, #12]
        local_functionStates = E_OK;
 8000eec:	2301      	movs	r3, #1
 8000eee:	73fb      	strb	r3, [r7, #15]
        break;
 8000ef0:	e013      	b.n	8000f1a <GPT_TIMx_SetInterrupt+0x6a>
    case GPT_Enaple_Interrupt :
        SET_BIT( TIM[Copy_GPT_TIMx]->DIER , TIMX_DIER_UIE );
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <GPT_TIMx_SetInterrupt+0x78>)
 8000ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efa:	899b      	ldrh	r3, [r3, #12]
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4909      	ldr	r1, [pc, #36]	; (8000f28 <GPT_TIMx_SetInterrupt+0x78>)
 8000f02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f06:	f042 0201 	orr.w	r2, r2, #1
 8000f0a:	b292      	uxth	r2, r2
 8000f0c:	819a      	strh	r2, [r3, #12]
        local_functionStates = E_OK;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
        break;
 8000f12:	e002      	b.n	8000f1a <GPT_TIMx_SetInterrupt+0x6a>
    default:
        local_functionStates = E_NOT_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]
        break;
 8000f18:	bf00      	nop
    }
    return local_functionStates;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000000 	.word	0x20000000

08000f2c <TIM1_UP_IRQHandler>:
        break;
    }
    return local_functionStates;
}
void TIM1_UP_IRQHandler (void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    if(GPT_TIM1_GetIntervalMode() == TIM_SINGLE_INTERVAL_MODE)
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <TIM1_UP_IRQHandler+0x60>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d117      	bne.n	8000f6e <TIM1_UP_IRQHandler+0x42>
    {
        CLR_BIT( TIM[0]->DIER , TIMX_DIER_UIE );
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <TIM1_UP_IRQHandler+0x64>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	899b      	ldrh	r3, [r3, #12]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <TIM1_UP_IRQHandler+0x64>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 0201 	bic.w	r2, r2, #1
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	819a      	strh	r2, [r3, #12]
        CLR_BIT( TIM[0]->CR1 , TIMX_CR1_CEN );
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <TIM1_UP_IRQHandler+0x64>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <TIM1_UP_IRQHandler+0x64>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	b292      	uxth	r2, r2
 8000f64:	801a      	strh	r2, [r3, #0]
        TIM[0]->ARR =0;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <TIM1_UP_IRQHandler+0x64>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	859a      	strh	r2, [r3, #44]	; 0x2c
    }else
    {

    }
    TIM1_CallBack();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <TIM1_UP_IRQHandler+0x68>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4798      	blx	r3
    CLR_BIT(TIM[0]->SR,TIMX_SR_UIF);
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <TIM1_UP_IRQHandler+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	8a1b      	ldrh	r3, [r3, #16]
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <TIM1_UP_IRQHandler+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0201 	bic.w	r2, r2, #1
 8000f84:	b292      	uxth	r2, r2
 8000f86:	821a      	strh	r2, [r3, #16]

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000006c 	.word	0x2000006c
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000070 	.word	0x20000070

08000f98 <GPT_PWM_INIT>:
    }
    TIM4_CallBack();
    CLR_BIT(TIM[3]->SR,TIMX_SR_UIF);
}
Std_ReturnType GPT_PWM_INIT(u8 Copy_TIMx,GPT_PWM_Config_t* Copy_PWM_Config)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	75fb      	strb	r3, [r7, #23]
    GPT_TIMx_PWM_SetChannel(Copy_TIMx , Copy_PWM_Config->PWM_Channel,Copy_PWM_Config->PWM_Mode);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	7899      	ldrb	r1, [r3, #2]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	799a      	ldrb	r2, [r3, #6]
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f8a6 	bl	8001104 <GPT_TIMx_PWM_SetChannel>
    u32 Local_counter = (Copy_PWM_Config->Freq * Copy_PWM_Config->ARR);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	889b      	ldrh	r3, [r3, #4]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	613b      	str	r3, [r7, #16]
    u16 Local_Prescalar = TIM_Clk_Freq/Local_counter;
 8000fc8:	4a21      	ldr	r2, [pc, #132]	; (8001050 <GPT_PWM_INIT+0xb8>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd0:	81fb      	strh	r3, [r7, #14]
    GPT_TIMx_SetPreScalar(Copy_TIMx,Local_Prescalar);
 8000fd2:	89fa      	ldrh	r2, [r7, #14]
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fe79 	bl	8000cd0 <GPT_TIMx_SetPreScalar>
    GPT_TIMx_SetPeriod( Copy_TIMx , Copy_PWM_Config->ARR);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	881a      	ldrh	r2, [r3, #0]
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe8c 	bl	8000d04 <GPT_TIMx_SetPeriod>
    SET_BIT( TIM[Copy_TIMx]->CR1 , TIMx_CR1_ARPE);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	4a19      	ldr	r2, [pc, #100]	; (8001054 <GPT_PWM_INIT+0xbc>)
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4916      	ldr	r1, [pc, #88]	; (8001054 <GPT_PWM_INIT+0xbc>)
 8000ffc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001004:	b292      	uxth	r2, r2
 8001006:	801a      	strh	r2, [r3, #0]
    SET_BIT( TIM[Copy_TIMx]->CR1 , TIMX_CR1_CEN);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <GPT_PWM_INIT+0xbc>)
 800100c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29a      	uxth	r2, r3
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	490f      	ldr	r1, [pc, #60]	; (8001054 <GPT_PWM_INIT+0xbc>)
 8001018:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800101c:	f042 0201 	orr.w	r2, r2, #1
 8001020:	b292      	uxth	r2, r2
 8001022:	801a      	strh	r2, [r3, #0]
    SET_BIT( TIM[Copy_TIMx]->EGR , TIMX_EGR_UG);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <GPT_PWM_INIT+0xbc>)
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	8a9b      	ldrh	r3, [r3, #20]
 800102e:	b29a      	uxth	r2, r3
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <GPT_PWM_INIT+0xbc>)
 8001034:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001038:	f042 0201 	orr.w	r2, r2, #1
 800103c:	b292      	uxth	r2, r2
 800103e:	829a      	strh	r2, [r3, #20]
    local_functionStates = E_OK;
 8001040:	2301      	movs	r3, #1
 8001042:	75fb      	strb	r3, [r7, #23]
    return local_functionStates;
 8001044:	7dfb      	ldrb	r3, [r7, #23]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	02255100 	.word	0x02255100
 8001054:	20000000 	.word	0x20000000

08001058 <GPT_TIMx_PWM_SetAllignmentMode>:
Std_ReturnType GPT_TIMx_PWM_SetAllignmentMode(u8 Copy_GPT_TIMx,GPT_PWM_AllignMode_t Copy_AllignMode)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]
    switch (Copy_AllignMode)
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <GPT_TIMx_PWM_SetAllignmentMode+0x20>
 8001072:	2b02      	cmp	r3, #2
 8001074:	d01f      	beq.n	80010b6 <GPT_TIMx_PWM_SetAllignmentMode+0x5e>
        CLR_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS0);
        SET_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS1);
        local_functionStates = E_OK;
        break;
    default:
        break;
 8001076:	e03d      	b.n	80010f4 <GPT_TIMx_PWM_SetAllignmentMode+0x9c>
        CLR_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS0);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4a21      	ldr	r2, [pc, #132]	; (8001100 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	b29a      	uxth	r2, r3
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	491e      	ldr	r1, [pc, #120]	; (8001100 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 8001088:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800108c:	f022 0220 	bic.w	r2, r2, #32
 8001090:	b292      	uxth	r2, r2
 8001092:	801a      	strh	r2, [r3, #0]
        CLR_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS1);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4917      	ldr	r1, [pc, #92]	; (8001100 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80010a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ac:	b292      	uxth	r2, r2
 80010ae:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
        break;
 80010b4:	e01e      	b.n	80010f4 <GPT_TIMx_PWM_SetAllignmentMode+0x9c>
        CLR_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS0);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4a11      	ldr	r2, [pc, #68]	; (8001100 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	490e      	ldr	r1, [pc, #56]	; (8001100 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80010c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010ca:	f022 0220 	bic.w	r2, r2, #32
 80010ce:	b292      	uxth	r2, r2
 80010d0:	801a      	strh	r2, [r3, #0]
        SET_BIT(TIM[Copy_GPT_TIMx]->CR1 , TIMX_CR1_CMS1);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4907      	ldr	r1, [pc, #28]	; (8001100 <GPT_TIMx_PWM_SetAllignmentMode+0xa8>)
 80010e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010ea:	b292      	uxth	r2, r2
 80010ec:	801a      	strh	r2, [r3, #0]
        local_functionStates = E_OK;
 80010ee:	2301      	movs	r3, #1
 80010f0:	73fb      	strb	r3, [r7, #15]
        break;
 80010f2:	bf00      	nop
    }
    return local_functionStates;
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000000 	.word	0x20000000

08001104 <GPT_TIMx_PWM_SetChannel>:
Std_ReturnType GPT_TIMx_PWM_SetChannel(u8 Copy_GPT_TIMx,GPT_PWM_Channel_t Copy_Channel,GPT_PWM_Mode_t Copy_PWM_Mode)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	460b      	mov	r3, r1
 8001110:	71bb      	strb	r3, [r7, #6]
 8001112:	4613      	mov	r3, r2
 8001114:	717b      	strb	r3, [r7, #5]
    Std_ReturnType local_functionStates = E_NOT_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
    switch (Copy_Channel)
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	2b03      	cmp	r3, #3
 800111e:	f200 8137 	bhi.w	8001390 <GPT_TIMx_PWM_SetChannel+0x28c>
 8001122:	a201      	add	r2, pc, #4	; (adr r2, 8001128 <GPT_TIMx_PWM_SetChannel+0x24>)
 8001124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001128:	08001139 	.word	0x08001139
 800112c:	080011cf 	.word	0x080011cf
 8001130:	08001265 	.word	0x08001265
 8001134:	080012fb 	.word	0x080012fb
    {
    case TIM_Channel1:
        TIM[Copy_GPT_TIMx]->CCMR1 = TIM[Copy_GPT_TIMx]->CCMR1 & ~(0b1111<<4);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4a9b      	ldr	r2, [pc, #620]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	8b1b      	ldrh	r3, [r3, #24]
 8001142:	b29a      	uxth	r2, r3
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4998      	ldr	r1, [pc, #608]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800114c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001150:	b292      	uxth	r2, r2
 8001152:	831a      	strh	r2, [r3, #24]
        TIM[Copy_GPT_TIMx]->CCMR1 = TIM[Copy_GPT_TIMx]->CCMR1 | (Copy_PWM_Mode<<4);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4a94      	ldr	r2, [pc, #592]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	8b1b      	ldrh	r3, [r3, #24]
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	797b      	ldrb	r3, [r7, #5]
 8001164:	011b      	lsls	r3, r3, #4
 8001166:	b21b      	sxth	r3, r3
 8001168:	4313      	orrs	r3, r2
 800116a:	b219      	sxth	r1, r3
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4a8e      	ldr	r2, [pc, #568]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	b28a      	uxth	r2, r1
 8001176:	831a      	strh	r2, [r3, #24]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCMR1 , TIMX_CCMR1_OC1PE);
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4a8b      	ldr	r2, [pc, #556]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	8b1b      	ldrh	r3, [r3, #24]
 8001182:	b29a      	uxth	r2, r3
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4988      	ldr	r1, [pc, #544]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001188:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800118c:	f042 0208 	orr.w	r2, r2, #8
 8001190:	b292      	uxth	r2, r2
 8001192:	831a      	strh	r2, [r3, #24]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCER , TIMX_CCER_CC1E );
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	4a84      	ldr	r2, [pc, #528]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	8c1b      	ldrh	r3, [r3, #32]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4981      	ldr	r1, [pc, #516]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80011a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011a8:	f042 0201 	orr.w	r2, r2, #1
 80011ac:	b292      	uxth	r2, r2
 80011ae:	841a      	strh	r2, [r3, #32]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCER , TIMX_CCER_CC1P );
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4a7d      	ldr	r2, [pc, #500]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	8c1b      	ldrh	r3, [r3, #32]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	497a      	ldr	r1, [pc, #488]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80011c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011c4:	f042 0202 	orr.w	r2, r2, #2
 80011c8:	b292      	uxth	r2, r2
 80011ca:	841a      	strh	r2, [r3, #32]
        break;
 80011cc:	e0e3      	b.n	8001396 <GPT_TIMx_PWM_SetChannel+0x292>
    case TIM_Channel2:
        TIM[Copy_GPT_TIMx]->CCMR1 = TIM[Copy_GPT_TIMx]->CCMR1 & ~(0b1111<<12);
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4a75      	ldr	r2, [pc, #468]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	8b1b      	ldrh	r3, [r3, #24]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	4972      	ldr	r1, [pc, #456]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80011de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011e2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80011e6:	b292      	uxth	r2, r2
 80011e8:	831a      	strh	r2, [r3, #24]
        TIM[Copy_GPT_TIMx]->CCMR1 = TIM[Copy_GPT_TIMx]->CCMR1 | (Copy_PWM_Mode<<12);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4a6e      	ldr	r2, [pc, #440]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	8b1b      	ldrh	r3, [r3, #24]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	031b      	lsls	r3, r3, #12
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b219      	sxth	r1, r3
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4a68      	ldr	r2, [pc, #416]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	b28a      	uxth	r2, r1
 800120c:	831a      	strh	r2, [r3, #24]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCMR1 , TIMX_CCMR1_OC2PE);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4a65      	ldr	r2, [pc, #404]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	8b1b      	ldrh	r3, [r3, #24]
 8001218:	b29a      	uxth	r2, r3
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4962      	ldr	r1, [pc, #392]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800121e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001226:	b292      	uxth	r2, r2
 8001228:	831a      	strh	r2, [r3, #24]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCER , TIMX_CCER_CC2E );
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4a5e      	ldr	r2, [pc, #376]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800122e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001232:	8c1b      	ldrh	r3, [r3, #32]
 8001234:	b29a      	uxth	r2, r3
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	495b      	ldr	r1, [pc, #364]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800123a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800123e:	f042 0210 	orr.w	r2, r2, #16
 8001242:	b292      	uxth	r2, r2
 8001244:	841a      	strh	r2, [r3, #32]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCER , TIMX_CCER_CC2P );
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4a57      	ldr	r2, [pc, #348]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	8c1b      	ldrh	r3, [r3, #32]
 8001250:	b29a      	uxth	r2, r3
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4954      	ldr	r1, [pc, #336]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001256:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	b292      	uxth	r2, r2
 8001260:	841a      	strh	r2, [r3, #32]
        break;
 8001262:	e098      	b.n	8001396 <GPT_TIMx_PWM_SetChannel+0x292>
    case TIM_Channel3:
        TIM[Copy_GPT_TIMx]->CCMR2 = TIM[Copy_GPT_TIMx]->CCMR2 & ~(0b1111<<4);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4a50      	ldr	r2, [pc, #320]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	8b9b      	ldrh	r3, [r3, #28]
 800126e:	b29a      	uxth	r2, r3
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	494d      	ldr	r1, [pc, #308]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001274:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001278:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800127c:	b292      	uxth	r2, r2
 800127e:	839a      	strh	r2, [r3, #28]
        TIM[Copy_GPT_TIMx]->CCMR2 = TIM[Copy_GPT_TIMx]->CCMR2 | (Copy_PWM_Mode<<4);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	8b9b      	ldrh	r3, [r3, #28]
 800128a:	b29b      	uxth	r3, r3
 800128c:	b21a      	sxth	r2, r3
 800128e:	797b      	ldrb	r3, [r7, #5]
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	b21b      	sxth	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b219      	sxth	r1, r3
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	b28a      	uxth	r2, r1
 80012a2:	839a      	strh	r2, [r3, #28]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCMR2 , TIMX_CCMR2_OC3PE);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	4a40      	ldr	r2, [pc, #256]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	8b9b      	ldrh	r3, [r3, #28]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	493d      	ldr	r1, [pc, #244]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80012b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012b8:	f042 0208 	orr.w	r2, r2, #8
 80012bc:	b292      	uxth	r2, r2
 80012be:	839a      	strh	r2, [r3, #28]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCER , TIMX_CCER_CC3E );
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4a39      	ldr	r2, [pc, #228]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	8c1b      	ldrh	r3, [r3, #32]
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4936      	ldr	r1, [pc, #216]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80012d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d8:	b292      	uxth	r2, r2
 80012da:	841a      	strh	r2, [r3, #32]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCER , TIMX_CCER_CC3P );
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	8c1b      	ldrh	r3, [r3, #32]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	492f      	ldr	r1, [pc, #188]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80012ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012f4:	b292      	uxth	r2, r2
 80012f6:	841a      	strh	r2, [r3, #32]
        break;
 80012f8:	e04d      	b.n	8001396 <GPT_TIMx_PWM_SetChannel+0x292>
    case TIM_Channel4:
        TIM[Copy_GPT_TIMx]->CCMR2 = TIM[Copy_GPT_TIMx]->CCMR2 & ~(0b1111<<4);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	8b9b      	ldrh	r3, [r3, #28]
 8001304:	b29a      	uxth	r2, r3
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	4927      	ldr	r1, [pc, #156]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800130a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800130e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001312:	b292      	uxth	r2, r2
 8001314:	839a      	strh	r2, [r3, #28]
        TIM[Copy_GPT_TIMx]->CCMR2 = TIM[Copy_GPT_TIMx]->CCMR2 | (Copy_PWM_Mode<<12);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	8b9b      	ldrh	r3, [r3, #28]
 8001320:	b29b      	uxth	r3, r3
 8001322:	b21a      	sxth	r2, r3
 8001324:	797b      	ldrb	r3, [r7, #5]
 8001326:	031b      	lsls	r3, r3, #12
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b219      	sxth	r1, r3
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	b28a      	uxth	r2, r1
 8001338:	839a      	strh	r2, [r3, #28]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCMR2 , TIMX_CCMR2_OC4PE);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	8b9b      	ldrh	r3, [r3, #28]
 8001344:	b29a      	uxth	r2, r3
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	4917      	ldr	r1, [pc, #92]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800134a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800134e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001352:	b292      	uxth	r2, r2
 8001354:	839a      	strh	r2, [r3, #28]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCER , TIMX_CCER_CC4E );
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4a13      	ldr	r2, [pc, #76]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	8c1b      	ldrh	r3, [r3, #32]
 8001360:	b29a      	uxth	r2, r3
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	4910      	ldr	r1, [pc, #64]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001366:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800136a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800136e:	b292      	uxth	r2, r2
 8001370:	841a      	strh	r2, [r3, #32]
        SET_BIT( TIM[Copy_GPT_TIMx]->CCER , TIMX_CCER_CC4P );
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	8c1b      	ldrh	r3, [r3, #32]
 800137c:	b29a      	uxth	r2, r3
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	4909      	ldr	r1, [pc, #36]	; (80013a8 <GPT_TIMx_PWM_SetChannel+0x2a4>)
 8001382:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800138a:	b292      	uxth	r2, r2
 800138c:	841a      	strh	r2, [r3, #32]
        break;
 800138e:	e002      	b.n	8001396 <GPT_TIMx_PWM_SetChannel+0x292>
    default:
        local_functionStates = E_NOT_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
        break;
 8001394:	bf00      	nop
    }
    local_functionStates = E_OK;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000

080013ac <GPT_PWM_SetDutyCycle>:
Std_ReturnType GPT_PWM_SetDutyCycle(u8 Copy_TIMx,GPT_PWM_Channel_t Copy_Channel , u8 Copy_DutyCycle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	460b      	mov	r3, r1
 80013b8:	71bb      	strb	r3, [r7, #6]
 80013ba:	4613      	mov	r3, r2
 80013bc:	717b      	strb	r3, [r7, #5]
    Std_ReturnType local_functionStates = E_NOT_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
    u16 Local_Pulse = TIM[Copy_TIMx]->ARR * Copy_DutyCycle/100.0;
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <GPT_PWM_SetDutyCycle+0xb8>)
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	fb02 f303 	mul.w	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f81c 	bl	8000414 <__aeabi_i2d>
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <GPT_PWM_SetDutyCycle+0xbc>)
 80013e2:	f7ff f9ab 	bl	800073c <__aeabi_ddiv>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fa8d 	bl	800090c <__aeabi_d2uiz>
 80013f2:	4603      	mov	r3, r0
 80013f4:	81bb      	strh	r3, [r7, #12]
    switch (Copy_Channel)
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d828      	bhi.n	800144e <GPT_PWM_SetDutyCycle+0xa2>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <GPT_PWM_SetDutyCycle+0x58>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001415 	.word	0x08001415
 8001408:	08001423 	.word	0x08001423
 800140c:	08001431 	.word	0x08001431
 8001410:	0800143f 	.word	0x0800143f
    {
    case TIM_Channel1 :
        TIM[Copy_TIMx]->CCR1=Local_Pulse;
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4a13      	ldr	r2, [pc, #76]	; (8001464 <GPT_PWM_SetDutyCycle+0xb8>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	89ba      	ldrh	r2, [r7, #12]
 800141e:	869a      	strh	r2, [r3, #52]	; 0x34
        break;
 8001420:	e018      	b.n	8001454 <GPT_PWM_SetDutyCycle+0xa8>
    case TIM_Channel2 :
        TIM[Copy_TIMx]->CCR2=Local_Pulse;
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <GPT_PWM_SetDutyCycle+0xb8>)
 8001426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142a:	89ba      	ldrh	r2, [r7, #12]
 800142c:	871a      	strh	r2, [r3, #56]	; 0x38
        break;
 800142e:	e011      	b.n	8001454 <GPT_PWM_SetDutyCycle+0xa8>
    case TIM_Channel3 :
        TIM[Copy_TIMx]->CCR3=Local_Pulse;
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <GPT_PWM_SetDutyCycle+0xb8>)
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	89ba      	ldrh	r2, [r7, #12]
 800143a:	879a      	strh	r2, [r3, #60]	; 0x3c
        break;
 800143c:	e00a      	b.n	8001454 <GPT_PWM_SetDutyCycle+0xa8>
    case TIM_Channel4 :
        TIM[Copy_TIMx]->CCR4=Local_Pulse;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4a08      	ldr	r2, [pc, #32]	; (8001464 <GPT_PWM_SetDutyCycle+0xb8>)
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	89ba      	ldrh	r2, [r7, #12]
 8001448:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        break;
 800144c:	e002      	b.n	8001454 <GPT_PWM_SetDutyCycle+0xa8>
    default:
        local_functionStates = E_NOT_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
        break;
 8001452:	bf00      	nop
    }
    local_functionStates = E_OK;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
    return local_functionStates;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	40590000 	.word	0x40590000

0800146c <MCAL_RCC_InitSysClock>:
#include "RCC_private.h"
#include "RCC_config.h"
#include "RCC_interface.h"
/*====================================================   Start_FUNCTION   ====================================================*/
Std_ReturnType MCAL_RCC_InitSysClock(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
    Std_ReturnType local_functionStates = E_NOT_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]
    #if RCC_SYSCLK == RCC_HSI
        /* Enable HSI */
        SET_BIT( RCC_CR , RCC_CR_HSION);
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MCAL_RCC_InitSysClock+0x4c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <MCAL_RCC_InitSysClock+0x4c>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6013      	str	r3, [r2, #0]
        /* Wait until the clock is stable */
        while( !GET_BIT( RCC_CR , RCC_CR_HSIRDY ) );
 8001482:	bf00      	nop
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MCAL_RCC_InitSysClock+0x4c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f9      	beq.n	8001484 <MCAL_RCC_InitSysClock+0x18>
        /* Select the HSI As system CLOCK */
        CLR_BIT( RCC_CFGR , 0 );
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MCAL_RCC_InitSysClock+0x50>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <MCAL_RCC_InitSysClock+0x50>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	6013      	str	r3, [r2, #0]
        CLR_BIT( RCC_CFGR , 1 );
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <MCAL_RCC_InitSysClock+0x50>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <MCAL_RCC_InitSysClock+0x50>)
 80014a2:	f023 0302 	bic.w	r3, r3, #2
 80014a6:	6013      	str	r3, [r2, #0]
        local_functionStates = E_OK;
 80014a8:	2301      	movs	r3, #1
 80014aa:	71fb      	strb	r3, [r7, #7]
            #error "Wrong Choice !!"
        #endif /* RCC_PLL_SRC */
    #else 
        #error "Wrong Choice !!"
    #endif /* RCC_SYSCLK */
    return local_functionStates;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021004 	.word	0x40021004

080014c0 <MCAL_Rcc_EnablePrephiral>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/

Std_ReturnType MCAL_Rcc_EnablePrephiral(u8 Copy_PeripheralId , u8 Copy_BusId)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	460a      	mov	r2, r1
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	4613      	mov	r3, r2
 80014ce:	71bb      	strb	r3, [r7, #6]
    Std_ReturnType local_functionStates = E_NOT_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
    switch (Copy_BusId)
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d020      	beq.n	800151c <MCAL_Rcc_EnablePrephiral+0x5c>
 80014da:	2b02      	cmp	r3, #2
 80014dc:	dc2b      	bgt.n	8001536 <MCAL_Rcc_EnablePrephiral+0x76>
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <MCAL_Rcc_EnablePrephiral+0x28>
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d00d      	beq.n	8001502 <MCAL_Rcc_EnablePrephiral+0x42>
 80014e6:	e026      	b.n	8001536 <MCAL_Rcc_EnablePrephiral+0x76>
    {
    case RCC_AHB:
    SET_BIT( RCC_AHBENR , Copy_PeripheralId );
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MCAL_Rcc_EnablePrephiral+0x88>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	2101      	movs	r1, #1
 80014f0:	fa01 f202 	lsl.w	r2, r1, r2
 80014f4:	4611      	mov	r1, r2
 80014f6:	4a14      	ldr	r2, [pc, #80]	; (8001548 <MCAL_Rcc_EnablePrephiral+0x88>)
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
    break;
 8001500:	e01c      	b.n	800153c <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB1:
    SET_BIT ( RCC_AHBENR , Copy_PeripheralId );
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MCAL_Rcc_EnablePrephiral+0x88>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	79fa      	ldrb	r2, [r7, #7]
 8001508:	2101      	movs	r1, #1
 800150a:	fa01 f202 	lsl.w	r2, r1, r2
 800150e:	4611      	mov	r1, r2
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <MCAL_Rcc_EnablePrephiral+0x88>)
 8001512:	430b      	orrs	r3, r1
 8001514:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8001516:	2301      	movs	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
    break;
 800151a:	e00f      	b.n	800153c <MCAL_Rcc_EnablePrephiral+0x7c>
    case RCC_APB2:
    SET_BIT ( RCC_APB2ENR , Copy_PeripheralId );
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MCAL_Rcc_EnablePrephiral+0x8c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	79fa      	ldrb	r2, [r7, #7]
 8001522:	2101      	movs	r1, #1
 8001524:	fa01 f202 	lsl.w	r2, r1, r2
 8001528:	4611      	mov	r1, r2
 800152a:	4a08      	ldr	r2, [pc, #32]	; (800154c <MCAL_Rcc_EnablePrephiral+0x8c>)
 800152c:	430b      	orrs	r3, r1
 800152e:	6013      	str	r3, [r2, #0]
    local_functionStates = E_OK;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
    break;
 8001534:	e002      	b.n	800153c <MCAL_Rcc_EnablePrephiral+0x7c>
    default:
    local_functionStates =E_NOT_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
    break;
 800153a:	bf00      	nop
    }
    return local_functionStates;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40021014 	.word	0x40021014
 800154c:	40021018 	.word	0x40021018

08001550 <SysTick_Handler>:
/**
 * @defgroup IRQ_Handlers IRQ Handlers
 * @{
 */
void SysTick_Handler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    if (SYSTICK_Callback != NULL)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <SysTick_Handler+0x50>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01e      	beq.n	800159a <SysTick_Handler+0x4a>
    {
        if (SYSTICK_ModeOfInterval == SYSTICK_SINGLE_INTERVAL)
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <SysTick_Handler+0x54>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <SysTick_Handler+0x38>
        {
            /**< Disable interrupt when the counter reaches zero */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_TICKINT_MASK;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <SysTick_Handler+0x58>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <SysTick_Handler+0x58>)
 800156a:	f023 0302 	bic.w	r3, r3, #2
 800156e:	6013      	str	r3, [r2, #0]
            /**< Disable SysTick timer */
            SYSTICK->CTRL &= ~SYSTICK_CTRL_ENABLE_MASK;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <SysTick_Handler+0x58>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0c      	ldr	r2, [pc, #48]	; (80015a8 <SysTick_Handler+0x58>)
 8001576:	f023 0301 	bic.w	r3, r3, #1
 800157a:	6013      	str	r3, [r2, #0]
            /**< Clear the current value */
            SYSTICK->LOAD=0;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <SysTick_Handler+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
            /**< Set the reload value to 0 */
            SYSTICK->VAL=0;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <SysTick_Handler+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
        }
        /**< Callback notification */
        SYSTICK_Callback();
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Handler+0x50>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4798      	blx	r3
        /**< Clear the count/interrupt flag */
        SYSTICK->CTRL &= ~SYSTICK_CTRL_COUNTFLAG_MASK;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <SysTick_Handler+0x58>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <SysTick_Handler+0x58>)
 8001594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
    }
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000074 	.word	0x20000074
 80015a4:	20000078 	.word	0x20000078
 80015a8:	e000e010 	.word	0xe000e010

080015ac <main>:
#include "RCC_interface.h"
#include "GPIO_interface.h"
#include "GPT_interface.h"

int main(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
	/*CLK INIT*/
	MCAL_RCC_InitSysClock();
 80015b2:	f7ff ff5b 	bl	800146c <MCAL_RCC_InitSysClock>
	MCAL_Rcc_EnablePrephiral(RCC_APB2_TIM1EN, RCC_APB2);
 80015b6:	2102      	movs	r1, #2
 80015b8:	200b      	movs	r0, #11
 80015ba:	f7ff ff81 	bl	80014c0 <MCAL_Rcc_EnablePrephiral>
	MCAL_Rcc_EnablePrephiral(RCC_APB2_IOPAEN, RCC_APB2);
 80015be:	2102      	movs	r1, #2
 80015c0:	2002      	movs	r0, #2
 80015c2:	f7ff ff7d 	bl	80014c0 <MCAL_Rcc_EnablePrephiral>
	MCAL_Rcc_EnablePrephiral(RCC_APB2_AFIOEN, RCC_APB2);
 80015c6:	2102      	movs	r1, #2
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ff79 	bl	80014c0 <MCAL_Rcc_EnablePrephiral>
	MCAL_GPIO_SetPinMode(GPIO_PORTA, GPIO_PIN8, GPIO_OUTPUT_HIGH_SPEED_AF_PP);
 80015ce:	220b      	movs	r2, #11
 80015d0:	2108      	movs	r1, #8
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff f9ec 	bl	80009b0 <MCAL_GPIO_SetPinMode>
	/*TIM 2 INIT*/
	GPT_Config_t Tim1_Config={1000,DOWNCounter,Edge_AllignedMode,DIV_1,Enable_Arr_Buffer,GPT_Enaple_Interrupt};
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <main+0x68>)
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015e2:	e883 0003 	stmia.w	r3, {r0, r1}
	GPT_TIMx_init(TIM1,&Tim1_Config);
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	4619      	mov	r1, r3
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fabd 	bl	8000b6c <GPT_TIMx_init>
	GPT_PWM_Config_t CH1_CONFIG={1000,TIM_Channel1,1000,PWM_11};
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <main+0x6c>)
 80015f4:	463b      	mov	r3, r7
 80015f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fa:	e883 0003 	stmia.w	r3, {r0, r1}
	GPT_PWM_INIT(TIM1, &CH1_CONFIG);
 80015fe:	463b      	mov	r3, r7
 8001600:	4619      	mov	r1, r3
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fcc8 	bl	8000f98 <GPT_PWM_INIT>
	GPT_PWM_SetDutyCycle(TIM1, TIM_Channel1, 10);
 8001608:	220a      	movs	r2, #10
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fecd 	bl	80013ac <GPT_PWM_SetDutyCycle>
    /* Loop forever */
	for(;;)
 8001612:	e7fe      	b.n	8001612 <main+0x66>
 8001614:	080016d0 	.word	0x080016d0
 8001618:	080016d8 	.word	0x080016d8

0800161c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800161e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001620:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <LoopForever+0x6>)
  ldr r1, =_edata
 8001626:	490d      	ldr	r1, [pc, #52]	; (800165c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <LoopForever+0xe>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800163c:	4c0a      	ldr	r4, [pc, #40]	; (8001668 <LoopForever+0x16>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800164a:	f000 f811 	bl	8001670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800164e:	f7ff ffad 	bl	80015ac <main>

08001652 <LoopForever>:

LoopForever:
  b LoopForever
 8001652:	e7fe      	b.n	8001652 <LoopForever>
  ldr   r0, =_estack
 8001654:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001660:	080016e8 	.word	0x080016e8
  ldr r2, =_sbss
 8001664:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001668:	2000007c 	.word	0x2000007c

0800166c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC1_2_IRQHandler>
	...

08001670 <__libc_init_array>:
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	2600      	movs	r6, #0
 8001674:	4d0c      	ldr	r5, [pc, #48]	; (80016a8 <__libc_init_array+0x38>)
 8001676:	4c0d      	ldr	r4, [pc, #52]	; (80016ac <__libc_init_array+0x3c>)
 8001678:	1b64      	subs	r4, r4, r5
 800167a:	10a4      	asrs	r4, r4, #2
 800167c:	42a6      	cmp	r6, r4
 800167e:	d109      	bne.n	8001694 <__libc_init_array+0x24>
 8001680:	f000 f81a 	bl	80016b8 <_init>
 8001684:	2600      	movs	r6, #0
 8001686:	4d0a      	ldr	r5, [pc, #40]	; (80016b0 <__libc_init_array+0x40>)
 8001688:	4c0a      	ldr	r4, [pc, #40]	; (80016b4 <__libc_init_array+0x44>)
 800168a:	1b64      	subs	r4, r4, r5
 800168c:	10a4      	asrs	r4, r4, #2
 800168e:	42a6      	cmp	r6, r4
 8001690:	d105      	bne.n	800169e <__libc_init_array+0x2e>
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	f855 3b04 	ldr.w	r3, [r5], #4
 8001698:	4798      	blx	r3
 800169a:	3601      	adds	r6, #1
 800169c:	e7ee      	b.n	800167c <__libc_init_array+0xc>
 800169e:	f855 3b04 	ldr.w	r3, [r5], #4
 80016a2:	4798      	blx	r3
 80016a4:	3601      	adds	r6, #1
 80016a6:	e7f2      	b.n	800168e <__libc_init_array+0x1e>
 80016a8:	080016e0 	.word	0x080016e0
 80016ac:	080016e0 	.word	0x080016e0
 80016b0:	080016e0 	.word	0x080016e0
 80016b4:	080016e4 	.word	0x080016e4

080016b8 <_init>:
 80016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ba:	bf00      	nop
 80016bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016be:	bc08      	pop	{r3}
 80016c0:	469e      	mov	lr, r3
 80016c2:	4770      	bx	lr

080016c4 <_fini>:
 80016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c6:	bf00      	nop
 80016c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ca:	bc08      	pop	{r3}
 80016cc:	469e      	mov	lr, r3
 80016ce:	4770      	bx	lr
